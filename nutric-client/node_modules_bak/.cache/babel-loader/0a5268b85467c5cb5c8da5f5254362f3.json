{"ast":null,"code":"import _toConsumableArray from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport BigCalendar from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nrequire('moment/locale/es.js');\n\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\nvar localizer = BigCalendar.momentLocalizer(moment); // or globalizeLocalizer\n\nvar ScheduleMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScheduleMain, _Component);\n\n  function ScheduleMain() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ScheduleMain);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScheduleMain)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.resizeEvent = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id == event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      }); //alert(`${event.title} was resized to ${start}-${end}`)\n\n    };\n\n    return _this;\n  }\n\n  _createClass(ScheduleMain, [{\n    key: \"moveEvent\",\n    value: function moveEvent(_ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end,\n          droppedOnAllDaySlot = _ref2.isAllDay;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n      var allDay = event.allDay;\n\n      if (!event.allDay && droppedOnAllDaySlot) {\n        allDay = true;\n      } else if (event.allDay && !droppedOnAllDaySlot) {\n        allDay = false;\n      }\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end,\n        allDay: allDay\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      }); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(event) {// let idList = this.state.events.map(a => a.id)\n      // let newId = Math.max(...idList) + 1\n      // let hour = {\n      //   id: newId,\n      //   title: 'New Event',\n      //   allDay: event.slots.length == 1,\n      //   start: event.start,\n      //   end: event.end,\n      // }\n      // this.setState({\n      //   events: this.state.events.concat([hour]),\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var headerTitle = this.props.headerTitle;\n      var dummyEvents = [{\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'hi'\n      }, {\n        allDay: true,\n        end: new Date('December 09, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'All Day Event'\n      }];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, headerTitle), React.createElement(\"div\", {\n        style: {\n          height: \"700px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(BigCalendar, {\n        localizer: localizer,\n        events: dummyEvents,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ScheduleMain;\n}(Component);\n\n;\nexport default ScheduleMain;","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js"],"names":["React","Component","render","BigCalendar","withDragAndDrop","moment","require","DragAndDropCalendar","localizer","momentLocalizer","ScheduleMain","resizeEvent","event","start","end","events","state","nextEvents","map","existingEvent","id","setState","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","headerTitle","props","dummyEvents","Date","title","height"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { render } from 'react-dom';\nimport BigCalendar from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\n\nrequire('moment/locale/es.js');\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar)\nconst localizer = BigCalendar.momentLocalizer(moment) // or globalizeLocalizer\n\nclass ScheduleMain extends Component{\n  \n  moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {\n    const { events } = this.state\n\n    const idx = events.indexOf(event)\n    let allDay = event.allDay\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false\n    }\n\n    const updatedEvent = { ...event, start, end, allDay }\n\n    const nextEvents = [...events]\n    nextEvents.splice(idx, 1, updatedEvent)\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  resizeEvent = ({ event, start, end }) => {\n    const { events } = this.state\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent\n    })\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    //alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  newEvent(event) {\n    // let idList = this.state.events.map(a => a.id)\n    // let newId = Math.max(...idList) + 1\n    // let hour = {\n    //   id: newId,\n    //   title: 'New Event',\n    //   allDay: event.slots.length == 1,\n    //   start: event.start,\n    //   end: event.end,\n    // }\n    // this.setState({\n    //   events: this.state.events.concat([hour]),\n    // })\n  }\n  render(){\n    const {headerTitle}=this.props\n    const dummyEvents = [\n      {\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'hi',\n      },\n      {\n        allDay: true,\n        end: new Date('December 09, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'All Day Event',\n      },\n    ];\n    return(\n      <div>\n        <div>{headerTitle}</div>\n        <div style={{height: \"700px\"}}>\n          <BigCalendar\n            localizer={localizer}\n            events={dummyEvents}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n          />\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default ScheduleMain;"]},"metadata":{},"sourceType":"module"}