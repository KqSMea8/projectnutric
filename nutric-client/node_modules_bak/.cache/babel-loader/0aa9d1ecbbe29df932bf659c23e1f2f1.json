{"ast":null,"code":"import _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/Lista2.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport keycode from 'keycode';\nimport Downshift from 'downshift';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Popper from '@material-ui/core/Popper';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport { connect } from 'react-redux';\nvar suggestions = [{\n  label: 'Afghanistan'\n}, {\n  label: 'Aland Islands'\n}];\n\nfunction renderInput(inputProps) {\n  var InputProps = inputProps.InputProps,\n      classes = inputProps.classes,\n      ref = inputProps.ref,\n      other = _objectWithoutProperties(inputProps, [\"InputProps\", \"classes\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    InputProps: _objectSpread({\n      inputRef: ref,\n      classes: {\n        root: classes.inputRoot,\n        input: classes.inputInput\n      }\n    }, InputProps)\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(_ref) {\n  var suggestion = _ref.suggestion,\n      index = _ref.index,\n      itemProps = _ref.itemProps,\n      highlightedIndex = _ref.highlightedIndex,\n      selectedItem = _ref.selectedItem;\n  var isHighlighted = highlightedIndex === index;\n  var isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n  return React.createElement(MenuItem, Object.assign({}, itemProps, {\n    key: suggestion.label,\n    selected: isHighlighted,\n    component: \"div\",\n    style: {\n      fontWeight: isSelected ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), suggestion.label);\n}\n\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({\n    label: PropTypes.string\n  }).isRequired\n};\n\nfunction getSuggestions(value) {\n  var inputValue = deburr(value.trim()).toLowerCase();\n  var inputLength = inputValue.length;\n  var count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(function (suggestion) {\n    var keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    container: {\n      flexGrow: 1,\n      position: 'relative'\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 1,\n      marginTop: theme.spacing.unit,\n      left: 0,\n      right: 0\n    },\n    chip: {\n      margin: \"\".concat(theme.spacing.unit / 2, \"px \").concat(theme.spacing.unit / 4, \"px\")\n    },\n    inputRoot: {\n      flexWrap: 'wrap'\n    },\n    inputInput: {\n      width: 'auto',\n      flexGrow: 1\n    },\n    divider: {\n      height: theme.spacing.unit * 2\n    }\n  };\n};\n\nfunction IntegrationDownshift(props) {\n  var classes = props.classes;\n  var patients = props.patients;\n  console.log(patients);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(Downshift, {\n    id: \"downshift-simple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        getItemProps = _ref2.getItemProps,\n        getMenuProps = _ref2.getMenuProps,\n        highlightedIndex = _ref2.highlightedIndex,\n        inputValue = _ref2.inputValue,\n        isOpen = _ref2.isOpen,\n        selectedItem = _ref2.selectedItem;\n    return React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, renderInput({\n      fullWidth: true,\n      classes: classes,\n      InputProps: getInputProps({\n        placeholder: 'buscar pacientes...'\n      })\n    }), React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), isOpen ? React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.label\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  }));\n}\n\nIntegrationDownshift.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n}\n\n;\nexport default connect(mapStateToProps, null)(withStyles(styles)(IntegrationDownshift));","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/Lista2.js"],"names":["React","PropTypes","deburr","keycode","Downshift","withStyles","TextField","Popper","Paper","MenuItem","Chip","connect","suggestions","label","renderInput","inputProps","InputProps","classes","ref","other","inputRef","root","inputRoot","input","inputInput","renderSuggestion","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","styles","theme","flexGrow","container","position","paper","zIndex","marginTop","spacing","unit","left","right","chip","margin","flexWrap","width","divider","height","IntegrationDownshift","props","patients","console","log","getInputProps","getItemProps","getMenuProps","isOpen","fullWidth","placeholder","map","item","mapStateToProps","state","currentUserId","currentUser","user","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport keycode from 'keycode';\nimport Downshift from 'downshift';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Popper from '@material-ui/core/Popper';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\n\nimport {connect} from 'react-redux';\n\n\nconst suggestions = [\n  { label: 'Afghanistan' },\n  { label: 'Aland Islands' }\n];\n\nfunction renderInput(inputProps) {\n  const { InputProps, classes, ref, ...other } = inputProps;\n\n  return (\n    <TextField\n      InputProps={{\n        inputRef: ref,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        },\n        ...InputProps,\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion({ suggestion, index, itemProps, highlightedIndex, selectedItem }) {\n  const isHighlighted = highlightedIndex === index;\n  const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n\n  return (\n    <MenuItem\n      {...itemProps}\n      key={suggestion.label}\n      selected={isHighlighted}\n      component=\"div\"\n      style={{\n        fontWeight: isSelected ? 500 : 400,\n      }}\n    >\n      {suggestion.label}\n    </MenuItem>\n  );\n}\nrenderSuggestion.propTypes = {\n  highlightedIndex: PropTypes.number,\n  index: PropTypes.number,\n  itemProps: PropTypes.object,\n  selectedItem: PropTypes.string,\n  suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\n};\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n        const keep =\n          count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n        if (keep) {\n          count += 1;\n        }\n\n        return keep;\n      });\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0,\n  },\n  chip: {\n    margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`,\n  },\n  inputRoot: {\n    flexWrap: 'wrap',\n  },\n  inputInput: {\n    width: 'auto',\n    flexGrow: 1,\n  },\n  divider: {\n    height: theme.spacing.unit * 2,\n  },\n});\n\n\nfunction IntegrationDownshift(props) {\n  const { classes } = props;\n  const {patients}=props;\n  console.log(patients)\n  return (\n    <div className={classes.root}>\n      <Downshift id=\"downshift-simple\">\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem,\n        }) => (\n          <div className={classes.container}>\n            {renderInput({\n              fullWidth: true,\n              classes,\n              InputProps: getInputProps({\n                placeholder: 'buscar pacientes...',\n              }),\n            })}\n            <div {...getMenuProps()}>\n              {isOpen ? (\n                <Paper className={classes.paper} square>\n                  {getSuggestions(inputValue).map((suggestion, index) =>\n                    renderSuggestion({\n                      suggestion,\n                      index,\n                      itemProps: getItemProps({ item: suggestion.label }),\n                      highlightedIndex,\n                      selectedItem,\n                    }),\n                  )}\n                </Paper>\n              ) : null}\n            </div>\n          </div>\n        )}\n      </Downshift>\n    </div>\n  );\n}\n\nIntegrationDownshift.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state){\n  return{\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n};\n  \nexport default connect(mapStateToProps, null)(withStyles(styles)(IntegrationDownshift));"]},"metadata":{},"sourceType":"module"}