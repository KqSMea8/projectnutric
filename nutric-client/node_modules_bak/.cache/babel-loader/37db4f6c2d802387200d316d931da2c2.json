{"ast":null,"code":"import _objectWithoutProperties from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { apiCall } from '../../services/api';\nimport { SET_CURRENT_EXPERT } from '../actionTypes';\nexport function setCurrentExpert(expert) {\n  return {\n    type: SET_CURRENT_EXPERT,\n    expert: expert\n  };\n}\nexport function authExpert(type, expertData) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      return apiCall(\"post\", \"/api/experts/\".concat(type), expertData).then(function (_ref) {\n        var token = _ref.token,\n            expert = _objectWithoutProperties(_ref, [\"token\"]);\n\n        localStorage.setItem(\"jwtToken\", token);\n        dispatch(setCurrentExpert(expert));\n        resolve();\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/store/actions/auth.js"],"names":["apiCall","SET_CURRENT_EXPERT","setCurrentExpert","expert","type","authExpert","expertData","dispatch","Promise","resolve","reject","then","token","localStorage","setItem"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,SAAQC,kBAAR,QAAiC,gBAAjC;AAEA,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAiC;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEH,kBADD;AAELE,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,UAAT,CAAoBD,IAApB,EAA0BE,UAA1B,EAAqC;AAC1C,SAAO,UAAAC,QAAQ,EAAI;AACjB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACnC,aAAOV,OAAO,CAAC,MAAD,yBAAwBI,IAAxB,GAA+BE,UAA/B,CAAP,CACJK,IADI,CACC,gBAAsB;AAAA,YAApBC,KAAoB,QAApBA,KAAoB;AAAA,YAAVT,MAAU;;AAC1BU,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCF,KAAhC;AACAL,QAAAA,QAAQ,CAACL,gBAAgB,CAACC,MAAD,CAAjB,CAAR;AACAM,QAAAA,OAAO;AACR,OALI,CAAP;AAMD,KAPM,CAAP;AAQD,GATD;AAUD","sourcesContent":["import {apiCall} from '../../services/api';\nimport {SET_CURRENT_EXPERT} from '../actionTypes'\n\nexport function setCurrentExpert(expert){\n  return {\n    type: SET_CURRENT_EXPERT,\n    expert\n  }\n}\n\nexport function authExpert(type, expertData){\n  return dispatch => {\n    return new Promise((resolve,reject)=>{\n      return apiCall(\"post\",`/api/experts/${type}`,expertData)\n        .then(({token, ...expert})=>{\n          localStorage.setItem(\"jwtToken\",token);\n          dispatch(setCurrentExpert(expert));\n          resolve();\n        })\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}