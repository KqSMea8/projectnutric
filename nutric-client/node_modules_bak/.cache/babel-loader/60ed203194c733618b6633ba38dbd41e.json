{"ast":null,"code":"import _toConsumableArray from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPatients } from '../../store/actions/patients';\nimport { fetchAppointments } from '../../store/actions/appointments';\nimport BigCalendar from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport Grid from '@material-ui/core/Grid';\nimport Popup from '../../components/Schedule/Popup';\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nrequire('moment/locale/es.js');\n\nvar localizer = BigCalendar.momentLocalizer(moment);\nvar eventsSeed = [{\n  id: 13,\n  title: 'Multi-day Event',\n  start: new Date(2018, 12, 20, 19, 30, 0),\n  end: new Date(2018, 12, 22, 2, 0, 0)\n}, {\n  id: 14,\n  title: 'Today',\n  start: new Date(new Date().setHours(new Date().getHours() - 3)),\n  end: new Date(new Date().setHours(new Date().getHours() + 3))\n}];\nvar appointments = this.props.appointments;\nvar scheduledAppointmentsEvents = appointments.map(function (appointment) {\n  return {\n    id: appointment._id,\n    title: \"Consulta\",\n    start: appointment.scheduledInfo.scheduledTimeStart,\n    end: appointment.scheduledInfo.scheduledTimeEnd\n  };\n});\nconsole.log(scheduledAppointmentsEvents);\nthis.setState({\n  events: scheduledAppointmentsEvents\n});\n\nvar ScheduleMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScheduleMain, _Component);\n\n  function ScheduleMain(props) {\n    var _this;\n\n    _classCallCheck(this, ScheduleMain);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScheduleMain).call(this, props));\n\n    _this.resizeEvent = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id == event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      }); // alert(`${event.title} was resized to ${start}-${end}`)\n\n    };\n\n    _this.state = {\n      events: []\n    };\n    _this.moveEvent = _this.moveEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newEvent = _this.newEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ScheduleMain, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentUserId = this.props.currentUserId;\n      this.props.fetchAppointments(currentUserId, console.log('was fetched'));\n      this.props.fetchPatients(currentUserId, console.log('was fetched'));\n    }\n  }, {\n    key: \"moveEvent\",\n    value: function moveEvent(_ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end,\n          droppedOnAllDaySlot = _ref2.isAllDay;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n      var allDay = event.allDay;\n\n      if (!event.allDay && droppedOnAllDaySlot) {\n        allDay = true;\n      } else if (event.allDay && !droppedOnAllDaySlot) {\n        allDay = false;\n      }\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end,\n        allDay: allDay\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      }); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(event) {// let idList = this.state.events.map(a => a.id)\n      // let newId = Math.max(...idList) + 1\n      // let hour = {\n      //   id: newId,\n      //   title: 'New Event',\n      //   allDay: event.slots.length == 1,\n      //   start: event.start,\n      //   end: event.end,\n      // }\n      // this.setState({\n      //   events: this.state.events.concat([hour]),\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var headerTitle = this.props.headerTitle;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, headerTitle), React.createElement(Grid, {\n        container: true,\n        justify: \"space-between\",\n        alignItems: \"baseline\",\n        spacing: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Ac\\xE1 va la tabla de schedule\")), React.createElement(Grid, {\n        item: true,\n        xs: 6,\n        align: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          height: \"700px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(DragAndDropCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: this.state.events,\n        onEventDrop: this.moveEvent,\n        resizable: true,\n        onEventResize: this.resizeEvent,\n        onSelectSlot: this.newEvent,\n        defaultView: BigCalendar.Views.WEEK,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return ScheduleMain;\n}(Component);\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    appointments: state.appointments,\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n}\n\n;\nexport default connect(mapStateToProps, {\n  fetchAppointments: fetchAppointments,\n  fetchPatients: fetchPatients\n})(ScheduleMain);","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js"],"names":["React","Component","connect","fetchPatients","fetchAppointments","BigCalendar","withDragAndDrop","moment","Grid","Popup","DragAndDropCalendar","require","localizer","momentLocalizer","eventsSeed","id","title","start","Date","end","setHours","getHours","appointments","props","scheduledAppointmentsEvents","map","appointment","_id","scheduledInfo","scheduledTimeStart","scheduledTimeEnd","console","log","setState","events","ScheduleMain","resizeEvent","event","state","nextEvents","existingEvent","moveEvent","bind","newEvent","currentUserId","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","headerTitle","height","Views","WEEK","mapStateToProps","patients","currentUser","user"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchPatients} from '../../store/actions/patients';\nimport {fetchAppointments} from '../../store/actions/appointments';\nimport BigCalendar from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\n\nimport Grid from '@material-ui/core/Grid';\nimport Popup from '../../components/Schedule/Popup'\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar)\nrequire('moment/locale/es.js');\n\nconst localizer = BigCalendar.momentLocalizer(moment)\n\nconst eventsSeed=[\n  {\n    id: 13,\n    title: 'Multi-day Event',\n    start: new Date(2018,12, 20, 19, 30, 0),\n    end: new Date(2018,12, 22, 2, 0, 0),\n  },\n  {\n    id: 14,\n    title: 'Today',\n    start: new Date(new Date().setHours(new Date().getHours() - 3)),\n    end: new Date(new Date().setHours(new Date().getHours() + 3)),\n  },\n]\n\n    const {appointments}=this.props\n    const scheduledAppointmentsEvents = appointments.map(function(appointment){\n      return {id: appointment._id, title: \"Consulta\", start: appointment.scheduledInfo.scheduledTimeStart, end: appointment.scheduledInfo.scheduledTimeEnd}\n    })\n    console.log(scheduledAppointmentsEvents)\n    this.setState({ events: scheduledAppointmentsEvents });\n\n\nclass ScheduleMain extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: []\n    }\n    this.moveEvent = this.moveEvent.bind(this)\n    this.newEvent = this.newEvent.bind(this)\n  }\n\n  componentDidMount(){\n    const { currentUserId } = this.props;\n    this.props.fetchAppointments(currentUserId, console.log('was fetched'));\n    this.props.fetchPatients(currentUserId, console.log('was fetched'));\n  }\n  \n  moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {\n    const { events } = this.state\n\n    const idx = events.indexOf(event)\n    let allDay = event.allDay\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false\n    }\n\n    const updatedEvent = { ...event, start, end, allDay }\n\n    const nextEvents = [...events]\n    nextEvents.splice(idx, 1, updatedEvent)\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  resizeEvent = ({ event, start, end }) => {\n    const { events } = this.state\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent\n    })\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    // alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  newEvent(event) {\n    // let idList = this.state.events.map(a => a.id)\n    // let newId = Math.max(...idList) + 1\n    // let hour = {\n    //   id: newId,\n    //   title: 'New Event',\n    //   allDay: event.slots.length == 1,\n    //   start: event.start,\n    //   end: event.end,\n    // }\n    // this.setState({\n    //   events: this.state.events.concat([hour]),\n    // })\n  }\n  render(){\n    const {headerTitle}=this.props\n\n    return(\n      <div>\n        <div>{headerTitle}</div>\n        <Grid container justify=\"space-between\" alignItems=\"baseline\" spacing={16}>\n          <Grid item xs={6}>\n              <div>Acá va la tabla de schedule</div>\n          </Grid>\n          <Grid item xs={6} align=\"right\">\n              <Popup/>\n          </Grid>\n          <Grid item xs={12}>\n            <div style={{height: \"700px\"}}>\n                <DragAndDropCalendar\n                  selectable\n                  localizer={localizer}\n                  events={this.state.events}\n                  onEventDrop={this.moveEvent}\n                  resizable\n                  onEventResize={this.resizeEvent}\n                  onSelectSlot={this.newEvent}\n                  defaultView={BigCalendar.Views.WEEK}\n                />\n            </div>\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }\n};\n\nfunction mapStateToProps(state){\n  return{\n    appointments: state.appointments,\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n};\n\nexport default connect(mapStateToProps, { fetchAppointments, fetchPatients})(ScheduleMain);\n"]},"metadata":{},"sourceType":"module"}