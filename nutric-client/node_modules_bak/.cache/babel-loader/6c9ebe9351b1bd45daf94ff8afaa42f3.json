{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/MealPlans/MealPlanPendingTable.js\";\n// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const rows = [\n//   { id: 'Paciente', numeric: false, disablePadding: true, label: 'Paciente' },\n//   { id: 'Fecha de creación', numeric: false, disablePadding: false, label: 'Fecha de creación' },\n//   { id: 'Objetivo', numeric: false, disablePadding: false, label: 'Objetivo' },\n//   { id: 'Progreso', numeric: true, disablePadding: false, label: 'Progreso' },\n// ];\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             <Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 align={row.numeric ? 'right' : 'left'}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     // minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     page: 0,\n//     rowsPerPage: 5,\n//   };\n//   handleRequestSort = (event, property) => {\n//     console.log(property)\n//     const orderBy = property;\n//     let order = 'desc';\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n//     this.setState({ order, orderBy });\n//   };\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(props => ({ selected: this.props.mealPlans.map((n, index) => index) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     this.setState({ selected: newSelected });\n//   };\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n//   render() {\n//     const { classes, mealPlans } = this.props;\n//     console.log(mealPlans)\n//     const { order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, mealPlans.length - page * rowsPerPage);\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={mealPlans.length}\n//             />\n//             <TableBody>\n//               {stableSort(mealPlans, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((mealPlan, index) => {\n//                   const isSelected = this.isSelected(index);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, index)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={mealPlan._id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {mealPlan.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{mealPlan.mealPlanName}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.creationDate}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.objective}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.progress}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={mealPlans.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n// export default withStyles(styles)(EnhancedTable);\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\nvar counter = 0;\n\nfunction createData(name, calories, fat, carbs, protein) {\n  counter += 1;\n  return {\n    id: counter,\n    name: name,\n    calories: calories,\n    fat: fat,\n    carbs: carbs,\n    protein: protein\n  };\n}\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  var stabilizedThis = array.map(function (el, index) {\n    return [el, index];\n  });\n  stabilizedThis.sort(function (a, b) {\n    var order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(function (el) {\n    return el[0];\n  });\n}\n\nfunction getSorting(order, orderBy) {\n  return order === 'desc' ? function (a, b) {\n    return desc(a, b, orderBy);\n  } : function (a, b) {\n    return -desc(a, b, orderBy);\n  };\n}\n\nvar rows = [{\n  id: 'Paciente',\n  numeric: false,\n  disablePadding: true,\n  label: 'Paciente'\n}, {\n  id: 'Fecha de creación',\n  numeric: false,\n  disablePadding: false,\n  label: 'Fecha de creación'\n}, {\n  id: 'Objetivo',\n  numeric: false,\n  disablePadding: false,\n  label: 'Objetivo'\n}, {\n  id: 'Progreso',\n  numeric: true,\n  disablePadding: false,\n  label: 'Progreso'\n}];\n\nvar EnhancedTableHead =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EnhancedTableHead, _React$Component);\n\n  function EnhancedTableHead() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EnhancedTableHead);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EnhancedTableHead)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.createSortHandler = function (property) {\n      return function (event) {\n        _this.props.onRequestSort(event, property);\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(EnhancedTableHead, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          onSelectAllClick = _this$props.onSelectAllClick,\n          order = _this$props.order,\n          orderBy = _this$props.orderBy,\n          numSelected = _this$props.numSelected,\n          rowCount = _this$props.rowCount;\n      return React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        indeterminate: numSelected > 0 && numSelected < rowCount,\n        checked: numSelected === rowCount,\n        onChange: onSelectAllClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      })), rows.map(function (row) {\n        return React.createElement(TableCell, {\n          key: row.id,\n          align: row.numeric ? 'right' : 'left',\n          padding: row.disablePadding ? 'none' : 'default',\n          sortDirection: orderBy === row.id ? order : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 414\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          title: \"Sort\",\n          placement: row.numeric ? 'bottom-end' : 'bottom-start',\n          enterDelay: 300,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 420\n          },\n          __self: this\n        }, React.createElement(TableSortLabel, {\n          active: orderBy === row.id,\n          direction: order,\n          onClick: _this2.createSortHandler(row.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425\n          },\n          __self: this\n        }, row.label)));\n      }, this)));\n    }\n  }]);\n\n  return EnhancedTableHead;\n}(React.Component);\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\n\nvar toolbarStyles = function toolbarStyles(theme) {\n  return {\n    root: {\n      paddingRight: theme.spacing.unit\n    },\n    highlight: theme.palette.type === 'light' ? {\n      color: theme.palette.secondary.main,\n      backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n    } : {\n      color: theme.palette.text.primary,\n      backgroundColor: theme.palette.secondary.dark\n    },\n    spacer: {\n      flex: '1 1 100%'\n    },\n    actions: {\n      color: theme.palette.text.secondary\n    },\n    title: {\n      flex: '0 0 auto'\n    }\n  };\n};\n\nvar EnhancedTableToolbar = function EnhancedTableToolbar(props) {\n  var numSelected = props.numSelected,\n      classes = props.classes;\n  return React.createElement(Toolbar, {\n    className: classNames(classes.root, _defineProperty({}, classes.highlight, numSelected > 0)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485\n    },\n    __self: this\n  }, numSelected > 0 ? React.createElement(Typography, {\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487\n    },\n    __self: this\n  }, numSelected, \" selected\") : React.createElement(Typography, {\n    variant: \"h6\",\n    id: \"tableTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  }, \"Nutrition\")), React.createElement(\"div\", {\n    className: classes.spacer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: classes.actions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497\n    },\n    __self: this\n  }, numSelected > 0 ? React.createElement(Tooltip, {\n    title: \"Delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    \"aria-label\": \"Delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }, React.createElement(DeleteIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501\n    },\n    __self: this\n  }))) : React.createElement(Tooltip, {\n    title: \"Filter list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    \"aria-label\": \"Filter list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506\n    },\n    __self: this\n  }, React.createElement(FilterListIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507\n    },\n    __self: this\n  })))));\n};\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired\n};\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      width: '100%',\n      marginTop: theme.spacing.unit * 3\n    },\n    table: {// minWidth: 1020,\n    },\n    tableWrapper: {\n      overflowX: 'auto'\n    }\n  };\n};\n\nvar EnhancedTable =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(EnhancedTable, _React$Component2);\n\n  function EnhancedTable() {\n    var _getPrototypeOf3;\n\n    var _this3;\n\n    _classCallCheck(this, EnhancedTable);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(EnhancedTable)).call.apply(_getPrototypeOf3, [this].concat(args)));\n    _this3.state = {\n      order: 'asc',\n      orderBy: 'calories',\n      selected: [],\n      data: _this3.props.mealPlans,\n      page: 0,\n      rowsPerPage: 5\n    };\n\n    _this3.handleRequestSort = function (event, property) {\n      var orderBy = property;\n      var order = 'desc';\n\n      if (_this3.state.orderBy === property && _this3.state.order === 'desc') {\n        order = 'asc';\n      }\n\n      _this3.setState({\n        order: order,\n        orderBy: orderBy\n      });\n    };\n\n    _this3.handleSelectAllClick = function (event) {\n      if (event.target.checked) {\n        _this3.setState(function (state) {\n          return {\n            selected: state.data.map(function (mealPlan, index) {\n              return index;\n            })\n          };\n        });\n\n        return;\n      }\n\n      _this3.setState({\n        selected: []\n      });\n    };\n\n    _this3.handleClick = function (event, id) {\n      var selected = _this3.state.selected;\n      var selectedIndex = selected.indexOf(id);\n      var newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, id);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n      }\n\n      _this3.setState({\n        selected: newSelected\n      });\n    };\n\n    _this3.handleChangePage = function (event, page) {\n      _this3.setState({\n        page: page\n      });\n    };\n\n    _this3.handleChangeRowsPerPage = function (event) {\n      _this3.setState({\n        rowsPerPage: event.target.value\n      });\n    };\n\n    _this3.isSelected = function (id) {\n      return _this3.state.selected.indexOf(id) !== -1;\n    };\n\n    return _this3;\n  }\n\n  _createClass(EnhancedTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          data = _this$state.data,\n          order = _this$state.order,\n          orderBy = _this$state.orderBy,\n          selected = _this$state.selected,\n          rowsPerPage = _this$state.rowsPerPage,\n          page = _this$state.page;\n      var emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n      return React.createElement(Paper, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }, React.createElement(EnhancedTableToolbar, {\n        numSelected: selected.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.tableWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        \"aria-labelledby\": \"tableTitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, React.createElement(EnhancedTableHead, {\n        numSelected: selected.length,\n        order: order,\n        orderBy: orderBy,\n        onSelectAllClick: this.handleSelectAllClick,\n        onRequestSort: this.handleRequestSort,\n        rowCount: data.length,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      }, stableSort(data, getSorting(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(function (mealPlan, index) {\n        var isSelected = _this4.isSelected(index);\n\n        return React.createElement(TableRow, {\n          hover: true,\n          onClick: function onClick(event) {\n            return _this4.handleClick(event, index);\n          },\n          role: \"checkbox\",\n          \"aria-checked\": isSelected,\n          tabIndex: -1,\n          key: mealPlan._id,\n          selected: isSelected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 620\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 629\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: isSelected,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          component: \"th\",\n          scope: \"row\",\n          padding: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 632\n          },\n          __self: this\n        }, mealPlan.mealPlanName), React.createElement(TableCell, {\n          align: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 635\n          },\n          __self: this\n        }, mealPlan.patient), React.createElement(TableCell, {\n          align: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 636\n          },\n          __self: this\n        }, mealPlan.createdAt), React.createElement(TableCell, {\n          align: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 637\n          },\n          __self: this\n        }, mealPlan.carbs), React.createElement(TableCell, {\n          align: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638\n          },\n          __self: this\n        }, mealPlan.protein));\n      }), emptyRows > 0 && React.createElement(TableRow, {\n        style: {\n          height: 49 * emptyRows\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        colSpan: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644\n        },\n        __self: this\n      }))))), React.createElement(TablePagination, {\n        rowsPerPageOptions: [5, 10, 25],\n        component: \"div\",\n        count: data.length,\n        rowsPerPage: rowsPerPage,\n        page: page,\n        backIconButtonProps: {\n          'aria-label': 'Previous Page'\n        },\n        nextIconButtonProps: {\n          'aria-label': 'Next Page'\n        },\n        onChangePage: this.handleChangePage,\n        onChangeRowsPerPage: this.handleChangeRowsPerPage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 650\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EnhancedTable;\n}(React.Component);\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EnhancedTable);","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/MealPlans/MealPlanPendingTable.js"],"names":["React","classNames","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TableSortLabel","Toolbar","Typography","Paper","Checkbox","IconButton","Tooltip","DeleteIcon","FilterListIcon","lighten","counter","createData","name","calories","fat","carbs","protein","id","desc","a","b","orderBy","stableSort","array","cmp","stabilizedThis","map","el","index","sort","order","getSorting","rows","numeric","disablePadding","label","EnhancedTableHead","createSortHandler","property","event","props","onRequestSort","onSelectAllClick","numSelected","rowCount","row","Component","propTypes","number","isRequired","func","string","toolbarStyles","theme","root","paddingRight","spacing","unit","highlight","palette","type","color","secondary","main","backgroundColor","light","text","primary","dark","spacer","flex","actions","title","EnhancedTableToolbar","classes","object","styles","width","marginTop","table","tableWrapper","overflowX","EnhancedTable","state","selected","data","mealPlans","page","rowsPerPage","handleRequestSort","setState","handleSelectAllClick","target","checked","mealPlan","handleClick","selectedIndex","indexOf","newSelected","concat","slice","length","handleChangePage","handleChangeRowsPerPage","value","isSelected","emptyRows","Math","min","_id","mealPlanName","patient","createdAt","height"],"mappingskB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,OAAT,QAAwB,2CAAxB;AAEA,IAAIC,OAAO,GAAG,CAAd;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgDC,OAAhD,EAAyD;AACvDN,EAAAA,OAAO,IAAI,CAAX;AACA,SAAO;AAAEO,IAAAA,EAAE,EAAEP,OAAN;AAAeE,IAAAA,IAAI,EAAJA,IAAf;AAAqBC,IAAAA,QAAQ,EAARA,QAArB;AAA+BC,IAAAA,GAAG,EAAHA,GAA/B;AAAoCC,IAAAA,KAAK,EAALA,KAApC;AAA2CC,IAAAA,OAAO,EAAPA;AAA3C,GAAP;AACD;;AAED,SAASE,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,OAApB,EAA6B;AAC3B,MAAID,CAAC,CAACC,OAAD,CAAD,GAAaF,CAAC,CAACE,OAAD,CAAlB,EAA6B;AAC3B,WAAO,CAAC,CAAR;AACD;;AACD,MAAID,CAAC,CAACC,OAAD,CAAD,GAAaF,CAAC,CAACE,OAAD,CAAlB,EAA6B;AAC3B,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAMC,cAAc,GAAGF,KAAK,CAACG,GAAN,CAAU,UAACC,EAAD,EAAKC,KAAL;AAAA,WAAe,CAACD,EAAD,EAAKC,KAAL,CAAf;AAAA,GAAV,CAAvB;AACAH,EAAAA,cAAc,CAACI,IAAf,CAAoB,UAACV,CAAD,EAAIC,CAAJ,EAAU;AAC5B,QAAMU,KAAK,GAAGN,GAAG,CAACL,CAAC,CAAC,CAAD,CAAF,EAAOC,CAAC,CAAC,CAAD,CAAR,CAAjB;AACA,QAAIU,KAAK,KAAK,CAAd,EAAiB,OAAOA,KAAP;AACjB,WAAOX,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAf;AACD,GAJD;AAKA,SAAOK,cAAc,CAACC,GAAf,CAAmB,UAAAC,EAAE;AAAA,WAAIA,EAAE,CAAC,CAAD,CAAN;AAAA,GAArB,CAAP;AACD;;AAED,SAASI,UAAT,CAAoBD,KAApB,EAA2BT,OAA3B,EAAoC;AAClC,SAAOS,KAAK,KAAK,MAAV,GAAmB,UAACX,CAAD,EAAIC,CAAJ;AAAA,WAAUF,IAAI,CAACC,CAAD,EAAIC,CAAJ,EAAOC,OAAP,CAAd;AAAA,GAAnB,GAAmD,UAACF,CAAD,EAAIC,CAAJ;AAAA,WAAU,CAACF,IAAI,CAACC,CAAD,EAAIC,CAAJ,EAAOC,OAAP,CAAf;AAAA,GAA1D;AACD;;AAED,IAAMW,IAAI,GAAG,CACX;AAAEf,EAAAA,EAAE,EAAE,UAAN;AAAkBgB,EAAAA,OAAO,EAAE,KAA3B;AAAkCC,EAAAA,cAAc,EAAE,IAAlD;AAAwDC,EAAAA,KAAK,EAAE;AAA/D,CADW,EAEX;AAAElB,EAAAA,EAAE,EAAE,mBAAN;AAA2BgB,EAAAA,OAAO,EAAE,KAApC;AAA2CC,EAAAA,cAAc,EAAE,KAA3D;AAAkEC,EAAAA,KAAK,EAAE;AAAzE,CAFW,EAGX;AAAElB,EAAAA,EAAE,EAAE,UAAN;AAAkBgB,EAAAA,OAAO,EAAE,KAA3B;AAAkCC,EAAAA,cAAc,EAAE,KAAlD;AAAyDC,EAAAA,KAAK,EAAE;AAAhE,CAHW,EAIX;AAAElB,EAAAA,EAAE,EAAE,UAAN;AAAkBgB,EAAAA,OAAO,EAAE,IAA3B;AAAiCC,EAAAA,cAAc,EAAE,KAAjD;AAAwDC,EAAAA,KAAK,EAAE;AAA/D,CAJW,CAAb;;IAOMC,iB;;;;;;;;;;;;;;;;;;UACJC,iB,GAAoB,UAAAC,QAAQ;AAAA,aAAI,UAAAC,KAAK,EAAI;AACvC,cAAKC,KAAL,CAAWC,aAAX,CAAyBF,KAAzB,EAAgCD,QAAhC;AACD,OAF2B;AAAA,K;;;;;;;6BAInB;AAAA;;AAAA,wBAC6D,KAAKE,KADlE;AAAA,UACCE,gBADD,eACCA,gBADD;AAAA,UACmBZ,KADnB,eACmBA,KADnB;AAAA,UAC0BT,OAD1B,eAC0BA,OAD1B;AAAA,UACmCsB,WADnC,eACmCA,WADnC;AAAA,UACgDC,QADhD,eACgDA,QADhD;AAGP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,aAAa,EAAED,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAGC,QADlD;AAEE,QAAA,OAAO,EAAED,WAAW,KAAKC,QAF3B;AAGE,QAAA,QAAQ,EAAEF,gBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAQGV,IAAI,CAACN,GAAL,CAAS,UAAAmB,GAAG,EAAI;AACf,eACE,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEA,GAAG,CAAC5B,EADX;AAEE,UAAA,KAAK,EAAE4B,GAAG,CAACZ,OAAJ,GAAc,OAAd,GAAwB,MAFjC;AAGE,UAAA,OAAO,EAAEY,GAAG,CAACX,cAAJ,GAAqB,MAArB,GAA8B,SAHzC;AAIE,UAAA,aAAa,EAAEb,OAAO,KAAKwB,GAAG,CAAC5B,EAAhB,GAAqBa,KAArB,GAA6B,KAJ9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,OAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,SAAS,EAAEe,GAAG,CAACZ,OAAJ,GAAc,YAAd,GAA6B,cAF1C;AAGE,UAAA,UAAU,EAAE,GAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE,oBAAC,cAAD;AACE,UAAA,MAAM,EAAEZ,OAAO,KAAKwB,GAAG,CAAC5B,EAD1B;AAEE,UAAA,SAAS,EAAEa,KAFb;AAGE,UAAA,OAAO,EAAE,MAAI,CAACO,iBAAL,CAAuBQ,GAAG,CAAC5B,EAA3B,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKG4B,GAAG,CAACV,KALP,CALF,CANF,CADF;AAsBD,OAvBA,EAuBE,IAvBF,CARH,CADF,CADF;AAqCD;;;;EA7C6B7C,KAAK,CAACwD,S;;AAgDtCV,iBAAiB,CAACW,SAAlB,GAA8B;AAC5BJ,EAAAA,WAAW,EAAEnD,SAAS,CAACwD,MAAV,CAAiBC,UADF;AAE5BR,EAAAA,aAAa,EAAEjD,SAAS,CAAC0D,IAAV,CAAeD,UAFF;AAG5BP,EAAAA,gBAAgB,EAAElD,SAAS,CAAC0D,IAAV,CAAeD,UAHL;AAI5BnB,EAAAA,KAAK,EAAEtC,SAAS,CAAC2D,MAAV,CAAiBF,UAJI;AAK5B5B,EAAAA,OAAO,EAAE7B,SAAS,CAAC2D,MAAV,CAAiBF,UALE;AAM5BL,EAAAA,QAAQ,EAAEpD,SAAS,CAACwD,MAAV,CAAiBC;AANC,CAA9B;;AASA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK;AAAA,SAAK;AAC9BC,IAAAA,IAAI,EAAE;AACJC,MAAAA,YAAY,EAAEF,KAAK,CAACG,OAAN,CAAcC;AADxB,KADwB;AAI9BC,IAAAA,SAAS,EACPL,KAAK,CAACM,OAAN,CAAcC,IAAd,KAAuB,OAAvB,GACI;AACEC,MAAAA,KAAK,EAAER,KAAK,CAACM,OAAN,CAAcG,SAAd,CAAwBC,IADjC;AAEEC,MAAAA,eAAe,EAAEvD,OAAO,CAAC4C,KAAK,CAACM,OAAN,CAAcG,SAAd,CAAwBG,KAAzB,EAAgC,IAAhC;AAF1B,KADJ,GAKI;AACEJ,MAAAA,KAAK,EAAER,KAAK,CAACM,OAAN,CAAcO,IAAd,CAAmBC,OAD5B;AAEEH,MAAAA,eAAe,EAAEX,KAAK,CAACM,OAAN,CAAcG,SAAd,CAAwBM;AAF3C,KAVwB;AAc9BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE;AADA,KAdsB;AAiB9BC,IAAAA,OAAO,EAAE;AACPV,MAAAA,KAAK,EAAER,KAAK,CAACM,OAAN,CAAcO,IAAd,CAAmBJ;AADnB,KAjBqB;AAoB9BU,IAAAA,KAAK,EAAE;AACLF,MAAAA,IAAI,EAAE;AADD;AApBuB,GAAL;AAAA,CAA3B;;AAyBA,IAAIG,oBAAoB,GAAG,8BAAAjC,KAAK,EAAI;AAAA,MAC1BG,WAD0B,GACDH,KADC,CAC1BG,WAD0B;AAAA,MACb+B,OADa,GACDlC,KADC,CACbkC,OADa;AAGlC,SACE,oBAAC,OAAD;AACE,IAAA,SAAS,EAAEnF,UAAU,CAACmF,OAAO,CAACpB,IAAT,sBAClBoB,OAAO,CAAChB,SADU,EACEf,WAAW,GAAG,CADhB,EADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAK,IAAA,SAAS,EAAE+B,OAAO,CAACF,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG7B,WAAW,GAAG,CAAd,GACC,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAC,SAAlB;AAA4B,IAAA,OAAO,EAAC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,WADH,cADD,GAKC,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,EAAE,EAAC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CALF,EAgBE;AAAK,IAAA,SAAS,EAAE+B,OAAO,CAACL,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBF,EAiBE;AAAK,IAAA,SAAS,EAAEK,OAAO,CAACH,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,WAAW,GAAG,CAAd,GACC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,kBAAW,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADD,GAOC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,kBAAW,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CARJ,CAjBF,CADF;AAmCD,CAtCD;;AAwCA8B,oBAAoB,CAAC1B,SAArB,GAAiC;AAC/B2B,EAAAA,OAAO,EAAElF,SAAS,CAACmF,MAAV,CAAiB1B,UADK;AAE/BN,EAAAA,WAAW,EAAEnD,SAAS,CAACwD,MAAV,CAAiBC;AAFC,CAAjC;AAKAwB,oBAAoB,GAAGhF,UAAU,CAAC2D,aAAD,CAAV,CAA0BqB,oBAA1B,CAAvB;;AAEA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAAvB,KAAK;AAAA,SAAK;AACvBC,IAAAA,IAAI,EAAE;AACJuB,MAAAA,KAAK,EAAE,MADH;AAEJC,MAAAA,SAAS,EAAEzB,KAAK,CAACG,OAAN,CAAcC,IAAd,GAAqB;AAF5B,KADiB;AAKvBsB,IAAAA,KAAK,EAAE,CACL;AADK,KALgB;AAQvBC,IAAAA,YAAY,EAAE;AACZC,MAAAA,SAAS,EAAE;AADC;AARS,GAAL;AAAA,CAApB;;IAaMC,a;;;;;;;;;;;;;;;;;WACJC,K,GAAQ;AACNrD,MAAAA,KAAK,EAAE,KADD;AAENT,MAAAA,OAAO,EAAE,UAFH;AAGN+D,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,IAAI,EAAE,OAAK7C,KAAL,CAAW8C,SAJX;AAKNC,MAAAA,IAAI,EAAE,CALA;AAMNC,MAAAA,WAAW,EAAE;AANP,K;;WASRC,iB,GAAoB,UAAClD,KAAD,EAAQD,QAAR,EAAqB;AACvC,UAAMjB,OAAO,GAAGiB,QAAhB;AACA,UAAIR,KAAK,GAAG,MAAZ;;AAEA,UAAI,OAAKqD,KAAL,CAAW9D,OAAX,KAAuBiB,QAAvB,IAAmC,OAAK6C,KAAL,CAAWrD,KAAX,KAAqB,MAA5D,EAAoE;AAClEA,QAAAA,KAAK,GAAG,KAAR;AACD;;AAED,aAAK4D,QAAL,CAAc;AAAE5D,QAAAA,KAAK,EAALA,KAAF;AAAST,QAAAA,OAAO,EAAPA;AAAT,OAAd;AACD,K;;WAEDsE,oB,GAAuB,UAAApD,KAAK,EAAI;AAC9B,UAAIA,KAAK,CAACqD,MAAN,CAAaC,OAAjB,EAA0B;AACxB,eAAKH,QAAL,CAAc,UAAAP,KAAK;AAAA,iBAAK;AAAEC,YAAAA,QAAQ,EAAED,KAAK,CAACE,IAAN,CAAW3D,GAAX,CAAe,UAACoE,QAAD,EAAWlE,KAAX;AAAA,qBAAqBA,KAArB;AAAA,aAAf;AAAZ,WAAL;AAAA,SAAnB;;AACA;AACD;;AACD,aAAK8D,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,K;;WAEDW,W,GAAc,UAACxD,KAAD,EAAQtB,EAAR,EAAe;AAAA,UACnBmE,QADmB,GACN,OAAKD,KADC,CACnBC,QADmB;AAE3B,UAAMY,aAAa,GAAGZ,QAAQ,CAACa,OAAT,CAAiBhF,EAAjB,CAAtB;AACA,UAAIiF,WAAW,GAAG,EAAlB;;AAEA,UAAIF,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBE,QAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBf,QAAnB,EAA6BnE,EAA7B,CAAd;AACD,OAFD,MAEO,IAAI+E,aAAa,KAAK,CAAtB,EAAyB;AAC9BE,QAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBf,QAAQ,CAACgB,KAAT,CAAe,CAAf,CAAnB,CAAd;AACD,OAFM,MAEA,IAAIJ,aAAa,KAAKZ,QAAQ,CAACiB,MAAT,GAAkB,CAAxC,EAA2C;AAChDH,QAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CAAmBf,QAAQ,CAACgB,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAnB,CAAd;AACD,OAFM,MAEA,IAAIJ,aAAa,GAAG,CAApB,EAAuB;AAC5BE,QAAAA,WAAW,GAAGA,WAAW,CAACC,MAAZ,CACZf,QAAQ,CAACgB,KAAT,CAAe,CAAf,EAAkBJ,aAAlB,CADY,EAEZZ,QAAQ,CAACgB,KAAT,CAAeJ,aAAa,GAAG,CAA/B,CAFY,CAAd;AAID;;AAED,aAAKN,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAEc;AAAZ,OAAd;AACD,K;;WAEDI,gB,GAAmB,UAAC/D,KAAD,EAAQgD,IAAR,EAAiB;AAClC,aAAKG,QAAL,CAAc;AAAEH,QAAAA,IAAI,EAAJA;AAAF,OAAd;AACD,K;;WAEDgB,uB,GAA0B,UAAAhE,KAAK,EAAI;AACjC,aAAKmD,QAAL,CAAc;AAAEF,QAAAA,WAAW,EAAEjD,KAAK,CAACqD,MAAN,CAAaY;AAA5B,OAAd;AACD,K;;WAEDC,U,GAAa,UAAAxF,EAAE;AAAA,aAAI,OAAKkE,KAAL,CAAWC,QAAX,CAAoBa,OAApB,CAA4BhF,EAA5B,MAAoC,CAAC,CAAzC;AAAA,K;;;;;;;6BAEN;AAAA;;AAAA,UACCyD,OADD,GACa,KAAKlC,KADlB,CACCkC,OADD;AAAA,wBAEuD,KAAKS,KAF5D;AAAA,UAECE,IAFD,eAECA,IAFD;AAAA,UAEOvD,KAFP,eAEOA,KAFP;AAAA,UAEcT,OAFd,eAEcA,OAFd;AAAA,UAEuB+D,QAFvB,eAEuBA,QAFvB;AAAA,UAEiCI,WAFjC,eAEiCA,WAFjC;AAAA,UAE8CD,IAF9C,eAE8CA,IAF9C;AAGP,UAAMmB,SAAS,GAAGlB,WAAW,GAAGmB,IAAI,CAACC,GAAL,CAASpB,WAAT,EAAsBH,IAAI,CAACgB,MAAL,GAAcd,IAAI,GAAGC,WAA3C,CAAhC;AAEA,aACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEd,OAAO,CAACpB,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,oBAAD;AAAsB,QAAA,WAAW,EAAE8B,QAAQ,CAACiB,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAE3B,OAAO,CAACM,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEN,OAAO,CAACK,KAA1B;AAAiC,2BAAgB,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,iBAAD;AACE,QAAA,WAAW,EAAEK,QAAQ,CAACiB,MADxB;AAEE,QAAA,KAAK,EAAEvE,KAFT;AAGE,QAAA,OAAO,EAAET,OAHX;AAIE,QAAA,gBAAgB,EAAE,KAAKsE,oBAJzB;AAKE,QAAA,aAAa,EAAE,KAAKF,iBALtB;AAME,QAAA,QAAQ,EAAEJ,IAAI,CAACgB,MANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG/E,UAAU,CAAC+D,IAAD,EAAOtD,UAAU,CAACD,KAAD,EAAQT,OAAR,CAAjB,CAAV,CACE+E,KADF,CACQb,IAAI,GAAGC,WADf,EAC4BD,IAAI,GAAGC,WAAP,GAAqBA,WADjD,EAEE9D,GAFF,CAEM,UAACoE,QAAD,EAAWlE,KAAX,EAAqB;AACxB,YAAM6E,UAAU,GAAG,MAAI,CAACA,UAAL,CAAgB7E,KAAhB,CAAnB;;AACA,eACE,oBAAC,QAAD;AACE,UAAA,KAAK,MADP;AAEE,UAAA,OAAO,EAAE,iBAAAW,KAAK;AAAA,mBAAI,MAAI,CAACwD,WAAL,CAAiBxD,KAAjB,EAAwBX,KAAxB,CAAJ;AAAA,WAFhB;AAGE,UAAA,IAAI,EAAC,UAHP;AAIE,0BAAc6E,UAJhB;AAKE,UAAA,QAAQ,EAAE,CAAC,CALb;AAME,UAAA,GAAG,EAAEX,QAAQ,CAACe,GANhB;AAOE,UAAA,QAAQ,EAAEJ,UAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WASE,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD;AAAU,UAAA,OAAO,EAAEA,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CATF,EAYE,oBAAC,SAAD;AAAW,UAAA,SAAS,EAAC,IAArB;AAA0B,UAAA,KAAK,EAAC,KAAhC;AAAsC,UAAA,OAAO,EAAC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGX,QAAQ,CAACgB,YADZ,CAZF,EAeE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BhB,QAAQ,CAACiB,OAAnC,CAfF,EAgBE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BjB,QAAQ,CAACkB,SAAnC,CAhBF,EAiBE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0BlB,QAAQ,CAAC/E,KAAnC,CAjBF,EAkBE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0B+E,QAAQ,CAAC9E,OAAnC,CAlBF,CADF;AAsBD,OA1BF,CADH,EA4BG0F,SAAS,GAAG,CAAZ,IACC,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE;AAAEO,UAAAA,MAAM,EAAE,KAAKP;AAAf,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAE,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA7BJ,CATF,CADF,CAFF,EAgDE,oBAAC,eAAD;AACE,QAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CADtB;AAEE,QAAA,SAAS,EAAC,KAFZ;AAGE,QAAA,KAAK,EAAErB,IAAI,CAACgB,MAHd;AAIE,QAAA,WAAW,EAAEb,WAJf;AAKE,QAAA,IAAI,EAAED,IALR;AAME,QAAA,mBAAmB,EAAE;AACnB,wBAAc;AADK,SANvB;AASE,QAAA,mBAAmB,EAAE;AACnB,wBAAc;AADK,SATvB;AAYE,QAAA,YAAY,EAAE,KAAKe,gBAZrB;AAaE,QAAA,mBAAmB,EAAE,KAAKC,uBAb5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhDF,CADF;AAkED;;;;EAnIyBjH,KAAK,CAACwD,S;;AAsIlCoC,aAAa,CAACnC,SAAd,GAA0B;AACxB2B,EAAAA,OAAO,EAAElF,SAAS,CAACmF,MAAV,CAAiB1B;AADF,CAA1B;AAIA,eAAexD,UAAU,CAACmF,MAAD,CAAV,CAAmBM,aAAnB,CAAf","sourcesContent":["// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const rows = [\n//   { id: 'Paciente', numeric: false, disablePadding: true, label: 'Paciente' },\n//   { id: 'Fecha de creación', numeric: false, disablePadding: false, label: 'Fecha de creación' },\n//   { id: 'Objetivo', numeric: false, disablePadding: false, label: 'Objetivo' },\n//   { id: 'Progreso', numeric: true, disablePadding: false, label: 'Progreso' },\n// ];\n\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             <Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 align={row.numeric ? 'right' : 'left'}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     // minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     page: 0,\n//     rowsPerPage: 5,\n//   };\n\n//   handleRequestSort = (event, property) => {\n//     console.log(property)\n//     const orderBy = property;\n//     let order = 'desc';\n\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n\n//     this.setState({ order, orderBy });\n//   };\n\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(props => ({ selected: this.props.mealPlans.map((n, index) => index) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     this.setState({ selected: newSelected });\n//   };\n\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n//   render() {\n//     const { classes, mealPlans } = this.props;\n//     console.log(mealPlans)\n//     const { order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, mealPlans.length - page * rowsPerPage);\n\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={mealPlans.length}\n//             />\n//             <TableBody>\n//               {stableSort(mealPlans, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((mealPlan, index) => {\n//                   const isSelected = this.isSelected(index);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, index)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={mealPlan._id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {mealPlan.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{mealPlan.mealPlanName}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.creationDate}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.objective}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.progress}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={mealPlans.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\n// export default withStyles(styles)(EnhancedTable);\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\n\nlet counter = 0;\nfunction createData(name, calories, fat, carbs, protein) {\n  counter += 1;\n  return { id: counter, name, calories, fat, carbs, protein };\n}\n\nfunction desc(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction stableSort(array, cmp) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nfunction getSorting(order, orderBy) {\n  return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n}\n\nconst rows = [\n  { id: 'Paciente', numeric: false, disablePadding: true, label: 'Paciente' },\n  { id: 'Fecha de creación', numeric: false, disablePadding: false, label: 'Fecha de creación' },\n  { id: 'Objetivo', numeric: false, disablePadding: false, label: 'Objetivo' },\n  { id: 'Progreso', numeric: true, disablePadding: false, label: 'Progreso' },\n];\n\nclass EnhancedTableHead extends React.Component {\n  createSortHandler = property => event => {\n    this.props.onRequestSort(event, property);\n  };\n\n  render() {\n    const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          <TableCell padding=\"checkbox\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={numSelected === rowCount}\n              onChange={onSelectAllClick}\n            />\n          </TableCell>\n          {rows.map(row => {\n            return (\n              <TableCell\n                key={row.id}\n                align={row.numeric ? 'right' : 'left'}\n                padding={row.disablePadding ? 'none' : 'default'}\n                sortDirection={orderBy === row.id ? order : false}\n              >\n                <Tooltip\n                  title=\"Sort\"\n                  placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n                  enterDelay={300}\n                >\n                  <TableSortLabel\n                    active={orderBy === row.id}\n                    direction={order}\n                    onClick={this.createSortHandler(row.id)}\n                  >\n                    {row.label}\n                  </TableSortLabel>\n                </Tooltip>\n              </TableCell>\n            );\n          }, this)}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nEnhancedTableHead.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.string.isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst toolbarStyles = theme => ({\n  root: {\n    paddingRight: theme.spacing.unit,\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  spacer: {\n    flex: '1 1 100%',\n  },\n  actions: {\n    color: theme.palette.text.secondary,\n  },\n  title: {\n    flex: '0 0 auto',\n  },\n});\n\nlet EnhancedTableToolbar = props => {\n  const { numSelected, classes } = props;\n\n  return (\n    <Toolbar\n      className={classNames(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      <div className={classes.title}>\n        {numSelected > 0 ? (\n          <Typography color=\"inherit\" variant=\"subtitle1\">\n            {numSelected} selected\n          </Typography>\n        ) : (\n          <Typography variant=\"h6\" id=\"tableTitle\">\n            Nutrition\n          </Typography>\n        )}\n      </div>\n      <div className={classes.spacer} />\n      <div className={classes.actions}>\n        {numSelected > 0 ? (\n          <Tooltip title=\"Delete\">\n            <IconButton aria-label=\"Delete\">\n              <DeleteIcon />\n            </IconButton>\n          </Tooltip>\n        ) : (\n          <Tooltip title=\"Filter list\">\n            <IconButton aria-label=\"Filter list\">\n              <FilterListIcon />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n};\n\nEnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing.unit * 3,\n  },\n  table: {\n    // minWidth: 1020,\n  },\n  tableWrapper: {\n    overflowX: 'auto',\n  },\n});\n\nclass EnhancedTable extends React.Component {\n  state = {\n    order: 'asc',\n    orderBy: 'calories',\n    selected: [],\n    data: this.props.mealPlans,\n    page: 0,\n    rowsPerPage: 5,\n  };\n\n  handleRequestSort = (event, property) => {\n    const orderBy = property;\n    let order = 'desc';\n\n    if (this.state.orderBy === property && this.state.order === 'desc') {\n      order = 'asc';\n    }\n\n    this.setState({ order, orderBy });\n  };\n\n  handleSelectAllClick = event => {\n    if (event.target.checked) {\n      this.setState(state => ({ selected: state.data.map((mealPlan, index) => index) }));\n      return;\n    }\n    this.setState({ selected: [] });\n  };\n\n  handleClick = (event, id) => {\n    const { selected } = this.state;\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    this.setState({ selected: newSelected });\n  };\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleChangeRowsPerPage = event => {\n    this.setState({ rowsPerPage: event.target.value });\n  };\n\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n  render() {\n    const { classes } = this.props;\n    const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    return (\n      <Paper className={classes.root}>\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <div className={classes.tableWrapper}>\n          <Table className={classes.table} aria-labelledby=\"tableTitle\">\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={this.handleSelectAllClick}\n              onRequestSort={this.handleRequestSort}\n              rowCount={data.length}\n            />\n            <TableBody>\n              {stableSort(data, getSorting(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((mealPlan, index) => {\n                  const isSelected = this.isSelected(index);\n                  return (\n                    <TableRow\n                      hover\n                      onClick={event => this.handleClick(event, index)}\n                      role=\"checkbox\"\n                      aria-checked={isSelected}\n                      tabIndex={-1}\n                      key={mealPlan._id}\n                      selected={isSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox checked={isSelected} />\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                        {mealPlan.mealPlanName}\n                      </TableCell>\n                      <TableCell align=\"right\">{mealPlan.patient}</TableCell>\n                      <TableCell align=\"right\">{mealPlan.createdAt}</TableCell>\n                      <TableCell align=\"right\">{mealPlan.carbs}</TableCell>\n                      <TableCell align=\"right\">{mealPlan.protein}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 49 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={data.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          backIconButtonProps={{\n            'aria-label': 'Previous Page',\n          }}\n          nextIconButtonProps={{\n            'aria-label': 'Next Page',\n          }}\n          onChangePage={this.handleChangePage}\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\n        />\n      </Paper>\n    );\n  }\n}\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EnhancedTable);"]},"metadata":{},"sourceType":"module"}