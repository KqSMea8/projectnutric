{"ast":null,"code":"import _defineProperty from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/MealPlans/MealPlanPendingTable.js\";\nimport React, { Component } from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\nvar PendingMealPlans = function PendingMealPlans(_ref) {\n  var _options;\n\n  var data = _ref.data,\n      numRows = _ref.numRows;\n  var columns = [\"Paciente\", \"Fecha de creación\", \"Objetivo\", \"Progreso\"]; //ojo con PatientsMain y numcolumnas\n\n  var options = (_options = {\n    filterType: 'dropdown',\n    rowsPerPage: numRows,\n    rowsPerPageOptions: [numRows, numRows * 2, numRows * 3],\n    textLabels: {\n      body: '' //estp pa q cuando esten fetcheando los mensajes, aparezca en blanco el table\n\n    }\n  }, _defineProperty(_options, \"filterType\", 'dropdown'), _defineProperty(_options, \"responsive\", 'scroll'), _options);\n  return React.createElement(MUIDataTable, {\n    title: ['Pacientes'],\n    data: data,\n    columns: columns,\n    options: options,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  });\n};\n\nexport default PendingMealPlans; // import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const rows = [\n//   { id: 'Paciente', numeric: false, disablePadding: true, label: 'Paciente' },\n//   { id: 'Fecha de creación', numeric: false, disablePadding: false, label: 'Fecha de creación' },\n//   { id: 'Objetivo', numeric: false, disablePadding: false, label: 'Objetivo' },\n//   { id: 'Progreso', numeric: true, disablePadding: false, label: 'Progreso' },\n// ];\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             <Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 align={row.numeric ? 'right' : 'left'}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     // minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     page: 0,\n//     rowsPerPage: 5,\n//   };\n//   handleRequestSort = (event, property) => {\n//     console.log(property)\n//     const orderBy = property;\n//     let order = 'desc';\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n//     this.setState({ order, orderBy });\n//   };\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(props => ({ selected: this.props.mealPlans.map((n, index) => index) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     this.setState({ selected: newSelected });\n//   };\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n//   render() {\n//     const { classes, mealPlans } = this.props;\n//     console.log(mealPlans)\n//     const { order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, mealPlans.length - page * rowsPerPage);\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={mealPlans.length}\n//             />\n//             <TableBody>\n//               {stableSort(mealPlans, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((mealPlan, index) => {\n//                   const isSelected = this.isSelected(index);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, index)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={mealPlan._id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {mealPlan.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{mealPlan.mealPlanName}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.creationDate}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.objective}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.progress}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={mealPlans.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n// export default withStyles(styles)(EnhancedTable);","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/MealPlans/MealPlanPendingTable.js"],"names":["React","Component","MUIDataTable","PendingMealPlans","data","numRows","columns","options","filterType","rowsPerPage","rowsPerPageOptions","textLabels","body"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAqB;AAAA;;AAAA,MAAnBC,IAAmB,QAAnBA,IAAmB;AAAA,MAAbC,OAAa,QAAbA,OAAa;AAC5C,MAAMC,OAAO,GAAG,CAAC,UAAD,EAAa,mBAAb,EAAkC,UAAlC,EAA8C,UAA9C,CAAhB,CAD4C,CAC+B;;AAE3E,MAAMC,OAAO;AACXC,IAAAA,UAAU,EAAE,UADD;AAEXC,IAAAA,WAAW,EAAEJ,OAFF;AAGXK,IAAAA,kBAAkB,EAAE,CAACL,OAAD,EAAUA,OAAO,GAAG,CAApB,EAAuBA,OAAO,GAAG,CAAjC,CAHT;AAIXM,IAAAA,UAAU,EAAC;AACTC,MAAAA,IAAI,EAAE,EADG,CACA;;AADA;AAJA,6CAOC,UAPD,2CAQC,QARD,YAAb;AAYA,SACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAE,CAAC,WAAD,CADT;AAEE,IAAA,IAAI,EAAER,IAFR;AAGE,IAAA,OAAO,EAAEE,OAHX;AAIE,IAAA,OAAO,EAAEC,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAvBD;;AAyBA,eAAeJ,gBAAfsourcesContent":["import React, { Component }  from 'react';\nimport MUIDataTable from \"mui-datatables\";\n\nconst PendingMealPlans = ({data, numRows}) => {\n  const columns = [\"Paciente\", \"Fecha de creación\", \"Objetivo\", \"Progreso\"]; //ojo con PatientsMain y numcolumnas\n\n  const options = {\n    filterType: 'dropdown',\n    rowsPerPage: numRows,\n    rowsPerPageOptions: [numRows, numRows * 2, numRows * 3],\n    textLabels:{\n      body: '' //estp pa q cuando esten fetcheando los mensajes, aparezca en blanco el table\n    },\n    filterType: 'dropdown',\n    responsive: 'scroll'\n  };  \n  \n  \n  return(\n    <MUIDataTable\n      title={['Pacientes']}\n      data={data}\n      columns={columns}\n      options={options}\n    />\n  )\n}\n\nexport default PendingMealPlans;\n\n// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const rows = [\n//   { id: 'Paciente', numeric: false, disablePadding: true, label: 'Paciente' },\n//   { id: 'Fecha de creación', numeric: false, disablePadding: false, label: 'Fecha de creación' },\n//   { id: 'Objetivo', numeric: false, disablePadding: false, label: 'Objetivo' },\n//   { id: 'Progreso', numeric: true, disablePadding: false, label: 'Progreso' },\n// ];\n\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             <Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 align={row.numeric ? 'right' : 'left'}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Nutrition\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     // minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     page: 0,\n//     rowsPerPage: 5,\n//   };\n\n//   handleRequestSort = (event, property) => {\n//     console.log(property)\n//     const orderBy = property;\n//     let order = 'desc';\n\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n\n//     this.setState({ order, orderBy });\n//   };\n\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(props => ({ selected: this.props.mealPlans.map((n, index) => index) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     this.setState({ selected: newSelected });\n//   };\n\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n//   render() {\n//     const { classes, mealPlans } = this.props;\n//     console.log(mealPlans)\n//     const { order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, mealPlans.length - page * rowsPerPage);\n\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={mealPlans.length}\n//             />\n//             <TableBody>\n//               {stableSort(mealPlans, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((mealPlan, index) => {\n//                   const isSelected = this.isSelected(index);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, index)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={mealPlan._id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {mealPlan.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{mealPlan.mealPlanName}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.creationDate}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.objective}</TableCell>\n//                       <TableCell align=\"right\">{mealPlan.progress}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={mealPlans.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\n// export default withStyles(styles)(EnhancedTable);\n"]},"metadata":{},"sourceType":"module"}