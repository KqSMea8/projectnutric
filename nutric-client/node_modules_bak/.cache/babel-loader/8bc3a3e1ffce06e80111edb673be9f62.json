{"ast":null,"code":"import _toConsumableArray from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport BigCalendar from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport events from './events';\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nrequire('moment/locale/es.js');\n\nvar localizer = BigCalendar.momentLocalizer(moment);\nvar dummyEvents = [{\n  allDay: false,\n  end: new Date('December 10, 2018 11:13:00'),\n  start: new Date('December 09, 2018 11:13:00'),\n  title: 'hi'\n}, {\n  allDay: true,\n  end: new Date('December 09, 2018 11:13:00'),\n  start: new Date('December 09, 2018 11:13:00'),\n  title: 'All Day Event'\n}];\n\nvar ScheduleMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScheduleMain, _Component);\n\n  function ScheduleMain(props) {\n    var _this;\n\n    _classCallCheck(this, ScheduleMain);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScheduleMain).call(this, props));\n\n    _this.resizeEvent = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id == event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      }); //alert(`${event.title} was resized to ${start}-${end}`)\n\n    };\n\n    _this.state = {\n      events: [{\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'hi'\n      }, {\n        allDay: true,\n        end: new Date('December 09, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'All Day Event'\n      }]\n    };\n    _this.moveEvent = _this.moveEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newEvent = _this.newEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ScheduleMain, [{\n    key: \"moveEvent\",\n    value: function moveEvent(_ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end,\n          droppedOnAllDaySlot = _ref2.isAllDay;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n      var allDay = event.allDay;\n\n      if (!event.allDay && droppedOnAllDaySlot) {\n        allDay = true;\n      } else if (event.allDay && !droppedOnAllDaySlot) {\n        allDay = false;\n      }\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end,\n        allDay: allDay\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      }); // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(event) {// let idList = this.state.events.map(a => a.id)\n      // let newId = Math.max(...idList) + 1\n      // let hour = {\n      //   id: newId,\n      //   title: 'New Event',\n      //   allDay: event.slots.length == 1,\n      //   start: event.start,\n      //   end: event.end,\n      // }\n      // this.setState({\n      //   events: this.state.events.concat([hour]),\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var headerTitle = this.props.headerTitle;\n      var events = this.state.events;\n      return React.createElement(\"div\", {\n        className: \"mainContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, headerTitle), React.createElement(\"div\", {\n        style: {\n          height: \"700px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(DragAndDropCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: this.state.events,\n        onEventDrop: this.moveEvent,\n        resizable: true,\n        onEventResize: this.resizeEvent,\n        onSelectSlot: this.newEvent,\n        defaultView: BigCalendar.Views.WEEK,\n        defaultDate: new Date(2015, 3, 12),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ScheduleMain;\n}(Component);\n\n;\nexport default ScheduleMain;","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js"],"names":["React","Component","render","BigCalendar","withDragAndDrop","moment","events","DragAndDropCalendar","require","localizer","momentLocalizer","dummyEvents","allDay","end","Date","start","title","ScheduleMain","props","resizeEvent","event","state","nextEvents","map","existingEvent","id","setState","moveEvent","bind","newEvent","droppedOnAllDaySlot","isAllDay","idx","indexOf","updatedEvent","splice","headerTitle","height","Views","WEEK"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { render } from 'react-dom';\nimport BigCalendar from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\nimport events from './events'\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar)\n\n\nrequire('moment/locale/es.js');\n\nconst localizer = BigCalendar.momentLocalizer(moment)\n\nconst dummyEvents = [\n      {\n        allDay: false,\n        end: new Date('December 10, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'hi',\n      },\n      {\n        allDay: true,\n        end: new Date('December 09, 2018 11:13:00'),\n        start: new Date('December 09, 2018 11:13:00'),\n        title: 'All Day Event',\n      },\n    ];\n\nclass ScheduleMain extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: [\n        {\n          allDay: false,\n          end: new Date('December 10, 2018 11:13:00'),\n          start: new Date('December 09, 2018 11:13:00'),\n          title: 'hi',\n        },\n        {\n          allDay: true,\n          end: new Date('December 09, 2018 11:13:00'),\n          start: new Date('December 09, 2018 11:13:00'),\n          title: 'All Day Event',\n        },\n      ]\n    }\n    this.moveEvent = this.moveEvent.bind(this)\n    this.newEvent = this.newEvent.bind(this)\n  }\n  \n  moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {\n    const { events } = this.state\n\n    const idx = events.indexOf(event)\n    let allDay = event.allDay\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false\n    }\n\n    const updatedEvent = { ...event, start, end, allDay }\n\n    const nextEvents = [...events]\n    nextEvents.splice(idx, 1, updatedEvent)\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    // alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  resizeEvent = ({ event, start, end }) => {\n    const { events } = this.state\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent\n    })\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    //alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  newEvent(event) {\n    // let idList = this.state.events.map(a => a.id)\n    // let newId = Math.max(...idList) + 1\n    // let hour = {\n    //   id: newId,\n    //   title: 'New Event',\n    //   allDay: event.slots.length == 1,\n    //   start: event.start,\n    //   end: event.end,\n    // }\n    // this.setState({\n    //   events: this.state.events.concat([hour]),\n    // })\n  }\n  render(){\n    const {headerTitle}=this.props\n    const { events } = this.state\n\n    return(\n      <div className=\"mainContainer\">\n        <div>{headerTitle}</div>\n        <div style={{height: \"700px\"}}>\n          {/*<BigCalendar\n            localizer={localizer}\n            events={events}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n          />*/}\n            <DragAndDropCalendar\n              selectable\n              localizer={localizer}\n              events={this.state.events}\n              onEventDrop={this.moveEvent}\n              resizable\n              onEventResize={this.resizeEvent}\n              onSelectSlot={this.newEvent}\n              defaultView={BigCalendar.Views.WEEK}\n              defaultDate={new Date(2015, 3, 12)}\n            />\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default ScheduleMain;"]},"metadata":{},"sourceType":"module"}