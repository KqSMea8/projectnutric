{"ast":null,"code":"import { apiCall } from '../../services/api';\nimport { addError } from './errors';\nimport { LOAD_PATIENTS } from '../actionTypes';\nexport var loadPatients = function loadPatients(patients) {\n  return {\n    type: LOAD_PATIENTS,\n    patients: patients\n  };\n};\nexport var fetchPatients = function fetchPatients(ID) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        currentUser = _getState.currentUser;\n\n    var expert_id = currentUser.user.id;\n    return apiCall(\"get\", \"/api/experts/\".concat(expert_id, \"/patients/\")).then(function (res) {\n      dispatch(loadPatients(res));\n    }).catch(function (err) {\n      dispatch(addError(err.message));\n    });\n  };\n};","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/store/actions/patients.js"],"names":["apiCall","addError","LOAD_PATIENTS","loadPatients","patients","type","fetchPatients","ID","dispatch","getState","currentUser","expert_id","user","id","then","res","catch","err","message"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD;AAAA,SAAe;AACzCC,IAAAA,IAAI,EAAEH,aADmC;AAEzCE,IAAAA,QAAQ,EAAEA;AAF+B,GAAf;AAAA,CAArB;AAKP,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAQ;AACnC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBACPA,QAAQ,EADD;AAAA,QACvBC,WADuB,aACvBA,WADuB;;AAE7B,QAAMC,SAAS,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,EAAnC;AACA,WAAOb,OAAO,CAAC,KAAD,yBAAwBW,SAAxB,gBAAP,CACJG,IADI,CACC,UAAAC,GAAG,EAAI;AACXP,MAAAA,QAAQ,CAACL,YAAY,CAACY,GAAD,CAAb,CAAR;AACD,KAHI,EAIJC,KAJI,CAIE,UAAAC,GAAG,EAAI;AACZT,MAAAA,QAAQ,CAACP,QAAQ,CAACgB,GAAG,CAACC,OAAL,CAAT,CAAR;AACD,KANI,CAAP;AAQD,GAXD;AAYD,CAbM","sourcesContent":["import { apiCall } from '../../services/api';\nimport { addError } from './errors';\nimport { LOAD_PATIENTS } from '../actionTypes';\n\nexport const loadPatients = (patients) => ({\n  type: LOAD_PATIENTS,\n  patients: patients\n});\n\nexport const fetchPatients = (ID) => {\n  return (dispatch, getState) => {\n    let { currentUser } = getState();\n    const expert_id = currentUser.user.id;\n    return apiCall(\"get\", `/api/experts/${expert_id}/patients/`)\n      .then(res => {\n        dispatch(loadPatients(res));\n      })\n      .catch(err => {\n        dispatch(addError(err.message));\n      });\n    \n  };\n};"]},"metadata":{},"sourceType":"module"}