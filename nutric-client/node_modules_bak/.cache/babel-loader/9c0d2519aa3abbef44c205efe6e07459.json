{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/Patients/PatientsList.js\";\n// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n// import apiCall from '../../services/api';\n// let counter = 0;\n// function createData(firstName, lastName, status, email, number) {\n//   counter += 1;\n//   return { id: counter,firstName, lastName, status, email, number };\n// }\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n// const rows = [\n//   { id: 'firstName', numeric: false, disablePadding: true, label: 'Nombre' },\n//   { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\n//   { id: 'email', numeric: true, disablePadding: false, label: 'Mail' },\n//   { id: 'phone', numeric: true, disablePadding: false, label: 'Numero' }\n// ];\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             {/*<Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//             */}\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 numeric={row.numeric}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Lista de Pacientes\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     data: [\n//       // fetchear\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Pepe', 'Activo', 'pepe@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Si', 'Activo', 'si@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n// ],\n//     page: 0,\n//     rowsPerPage: 10,\n//   };\n//   handleRequestSort = (event, property) => {\n//     const orderBy = property;\n//     let order = 'desc';\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n//     this.setState({ order, orderBy });\n//   };\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(state => ({ selected: state.data.map(n => n.id) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     this.setState({ selected: newSelected });\n//   };\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n//   render() {\n//     const { classes } = this.props;\n//     const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={data.length}\n//             />\n//             <TableBody>\n//               {stableSort(data, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map(n => {\n//                   const isSelected = this.isSelected(n.id);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, n.id)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={n.id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {n.firstName}\n//                       </TableCell>\n//                       <TableCell numeric>{n.lastName}</TableCell>\n//                       <TableCell numeric>{n.status}</TableCell>\n//                       <TableCell numeric>{n.email}</TableCell>\n//                       <TableCell numeric>{n.number}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={data.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n// export default withStyles(styles)(EnhancedTable);\nimport React, { Component } from 'react';\nimport MUIDataTable from \"mui-datatables\";\nimport apiCall from '../../services/api';\nimport { connect } from 'react-redux';\nimport { fetchPatients } from '../../store/actions/patients';\n\nvar PatientsList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PatientsList, _Component);\n\n  function PatientsList() {\n    _classCallCheck(this, PatientsList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PatientsList).apply(this, arguments));\n  }\n\n  _createClass(PatientsList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.fetchPatients();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var columns = [\"Name\", \"Company\", \"City\", \"State\"];\n      var data = [[\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"], [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"], [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"], [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"]];\n      var patientsList = 2;\n      var options = {\n        filterType: 'checkbox'\n      };\n      return React.createElement(MUIDataTable, {\n        title: \"Pacientes\",\n        data: data,\n        columns: columns,\n        options: options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return PatientsList;\n}(Component);\n\nexport default connect(null, {\n  fetchPatients: fetchPatients\n})(PatientsList);","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/Patients/PatientsList.js"],"names":["React","Component","MUIDataTable","apiCall","connect","fetchPatients","PatientsList","props","columns","data","patientsList","options","filterType"],"mappingsgBC,SAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,aAAR,QAA4B,8BAA5B;;IAEMC,Y;;;;;;;;;;;;;wCACe;AACjB,WAAKC,KAAL,CAAWF,aAAX;AACD;;;6BAGO;AACN,UAAMG,OAAO,GAAG,CAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,EAA4B,OAA5B,CAAhB;AACA,UAAMC,IAAI,GAAG,CACZ,CAAC,WAAD,EAAc,WAAd,EAA2B,SAA3B,EAAsC,IAAtC,CADY,EAEZ,CAAC,YAAD,EAAe,WAAf,EAA4B,UAA5B,EAAwC,IAAxC,CAFY,EAGZ,CAAC,UAAD,EAAa,WAAb,EAA0B,OAA1B,EAAmC,IAAnC,CAHY,EAIZ,CAAC,eAAD,EAAkB,WAAlB,EAA+B,QAA/B,EAAyC,IAAzC,CAJY,CAAb;AAOA,UAAMC,YAAY,GAAG,CAArB;AAEA,UAAMC,OAAO,GAAG;AACdC,QAAAA,UAAU,EAAE;AADE,OAAhB;AAIA,aACE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAE,WADT;AAEE,QAAA,IAAI,EAAEH,IAFR;AAGE,QAAA,OAAO,EAAED,OAHX;AAIE,QAAA,OAAO,EAAEG,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;;;EA7BwBV,S;;AAgC3B,eAAeG,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA,aAAa,EAAbA;AAAF,CAAP,CAAP,CAAiCC,YAAjC,CAAf","sourcesContent":["// import React from 'react';\n// import classNames from 'classnames';\n// import PropTypes from 'prop-types';\n// import { withStyles } from '@material-ui/core/styles';\n// import Table from '@material-ui/core/Table';\n// import TableBody from '@material-ui/core/TableBody';\n// import TableCell from '@material-ui/core/TableCell';\n// import TableHead from '@material-ui/core/TableHead';\n// import TablePagination from '@material-ui/core/TablePagination';\n// import TableRow from '@material-ui/core/TableRow';\n// import TableSortLabel from '@material-ui/core/TableSortLabel';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import Paper from '@material-ui/core/Paper';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import IconButton from '@material-ui/core/IconButton';\n// import Tooltip from '@material-ui/core/Tooltip';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import { lighten } from '@material-ui/core/styles/colorManipulator';\n\n// import apiCall from '../../services/api';\n\n\n// let counter = 0;\n// function createData(firstName, lastName, status, email, number) {\n//   counter += 1;\n//   return { id: counter,firstName, lastName, status, email, number };\n// }\n\n// function desc(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n\n// function stableSort(array, cmp) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = cmp(a[0], b[0]);\n//     if (order !== 0) return order;\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map(el => el[0]);\n// }\n\n// function getSorting(order, orderBy) {\n//   return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n// }\n\n// const rows = [\n//   { id: 'firstName', numeric: false, disablePadding: true, label: 'Nombre' },\n//   { id: 'status', numeric: true, disablePadding: false, label: 'Status' },\n//   { id: 'email', numeric: true, disablePadding: false, label: 'Mail' },\n//   { id: 'phone', numeric: true, disablePadding: false, label: 'Numero' }\n// ];\n\n// class EnhancedTableHead extends React.Component {\n//   createSortHandler = property => event => {\n//     this.props.onRequestSort(event, property);\n//   };\n\n//   render() {\n//     const { onSelectAllClick, order, orderBy, numSelected, rowCount } = this.props;\n\n//     return (\n//       <TableHead>\n//         <TableRow>\n//           <TableCell padding=\"checkbox\">\n//             {/*<Checkbox\n//               indeterminate={numSelected > 0 && numSelected < rowCount}\n//               checked={numSelected === rowCount}\n//               onChange={onSelectAllClick}\n//             />\n//             */}\n//           </TableCell>\n//           {rows.map(row => {\n//             return (\n//               <TableCell\n//                 key={row.id}\n//                 numeric={row.numeric}\n//                 padding={row.disablePadding ? 'none' : 'default'}\n//                 sortDirection={orderBy === row.id ? order : false}\n//               >\n//                 <Tooltip\n//                   title=\"Sort\"\n//                   placement={row.numeric ? 'bottom-end' : 'bottom-start'}\n//                   enterDelay={300}\n//                 >\n//                   <TableSortLabel\n//                     active={orderBy === row.id}\n//                     direction={order}\n//                     onClick={this.createSortHandler(row.id)}\n//                   >\n//                     {row.label}\n//                   </TableSortLabel>\n//                 </Tooltip>\n//               </TableCell>\n//             );\n//           }, this)}\n//         </TableRow>\n//       </TableHead>\n//     );\n//   }\n// }\n\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.string.isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n\n// const toolbarStyles = theme => ({\n//   root: {\n//     paddingRight: theme.spacing.unit,\n//   },\n//   highlight:\n//     theme.palette.type === 'light'\n//       ? {\n//           color: theme.palette.secondary.main,\n//           backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n//         }\n//       : {\n//           color: theme.palette.text.primary,\n//           backgroundColor: theme.palette.secondary.dark,\n//         },\n//   spacer: {\n//     flex: '1 1 100%',\n//   },\n//   actions: {\n//     color: theme.palette.text.secondary,\n//   },\n//   title: {\n//     flex: '0 0 auto',\n//   },\n// });\n\n// let EnhancedTableToolbar = props => {\n//   const { numSelected, classes } = props;\n\n//   return (\n//     <Toolbar\n//       className={classNames(classes.root, {\n//         [classes.highlight]: numSelected > 0,\n//       })}\n//     >\n//       <div className={classes.title}>\n//         {numSelected > 0 ? (\n//           <Typography color=\"inherit\" variant=\"subtitle1\">\n//             {numSelected} selected\n//           </Typography>\n//         ) : (\n//           <Typography variant=\"h6\" id=\"tableTitle\">\n//             Lista de Pacientes\n//           </Typography>\n//         )}\n//       </div>\n//       <div className={classes.spacer} />\n//       <div className={classes.actions}>\n//         {numSelected > 0 ? (\n//           <Tooltip title=\"Delete\">\n//             <IconButton aria-label=\"Delete\">\n//               <DeleteIcon />\n//             </IconButton>\n//           </Tooltip>\n//         ) : (\n//           <Tooltip title=\"Filter list\">\n//             <IconButton aria-label=\"Filter list\">\n//               <FilterListIcon />\n//             </IconButton>\n//           </Tooltip>\n//         )}\n//       </div>\n//     </Toolbar>\n//   );\n// };\n\n// EnhancedTableToolbar.propTypes = {\n//   classes: PropTypes.object.isRequired,\n//   numSelected: PropTypes.number.isRequired,\n// };\n\n// EnhancedTableToolbar = withStyles(toolbarStyles)(EnhancedTableToolbar);\n\n// const styles = theme => ({\n//   root: {\n//     width: '100%',\n//     marginTop: theme.spacing.unit * 3,\n//   },\n//   table: {\n//     minWidth: 1020,\n//   },\n//   tableWrapper: {\n//     overflowX: 'auto',\n//   },\n// });\n\n// class EnhancedTable extends React.Component {\n//   state = {\n//     order: 'asc',\n//     orderBy: 'calories',\n//     selected: [],\n//     data: [\n//       // fetchear\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Pepe', 'Activo', 'pepe@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Si', 'Activo', 'si@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n//       createData('Juan', 'Activo', 'juan@nutric.com', '992349721'),\n      \n    \n// ],\n//     page: 0,\n//     rowsPerPage: 10,\n//   };\n\n//   handleRequestSort = (event, property) => {\n//     const orderBy = property;\n//     let order = 'desc';\n\n//     if (this.state.orderBy === property && this.state.order === 'desc') {\n//       order = 'asc';\n//     }\n\n//     this.setState({ order, orderBy });\n//   };\n\n//   handleSelectAllClick = event => {\n//     if (event.target.checked) {\n//       this.setState(state => ({ selected: state.data.map(n => n.id) }));\n//       return;\n//     }\n//     this.setState({ selected: [] });\n//   };\n\n//   handleClick = (event, id) => {\n//     const { selected } = this.state;\n//     const selectedIndex = selected.indexOf(id);\n//     let newSelected = [];\n\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, id);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n\n//     this.setState({ selected: newSelected });\n//   };\n\n//   handleChangePage = (event, page) => {\n//     this.setState({ page });\n//   };\n\n//   handleChangeRowsPerPage = event => {\n//     this.setState({ rowsPerPage: event.target.value });\n//   };\n\n//   isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n//   render() {\n//     const { classes } = this.props;\n//     const { data, order, orderBy, selected, rowsPerPage, page } = this.state;\n//     const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n//     return (\n//       <Paper className={classes.root}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <div className={classes.tableWrapper}>\n//           <Table className={classes.table} aria-labelledby=\"tableTitle\">\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={this.handleSelectAllClick}\n//               onRequestSort={this.handleRequestSort}\n//               rowCount={data.length}\n//             />\n//             <TableBody>\n//               {stableSort(data, getSorting(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map(n => {\n//                   const isSelected = this.isSelected(n.id);\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={event => this.handleClick(event, n.id)}\n//                       role=\"checkbox\"\n//                       aria-checked={isSelected}\n//                       tabIndex={-1}\n//                       key={n.id}\n//                       selected={isSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox checked={isSelected} />\n//                       </TableCell>\n//                       <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n//                         {n.firstName}\n//                       </TableCell>\n//                       <TableCell numeric>{n.lastName}</TableCell>\n//                       <TableCell numeric>{n.status}</TableCell>\n//                       <TableCell numeric>{n.email}</TableCell>\n//                       <TableCell numeric>{n.number}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow style={{ height: 49 * emptyRows }}>\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </div>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={data.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           backIconButtonProps={{\n//             'aria-label': 'Previous Page',\n//           }}\n//           nextIconButtonProps={{\n//             'aria-label': 'Next Page',\n//           }}\n//           onChangePage={this.handleChangePage}\n//           onChangeRowsPerPage={this.handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//     );\n//   }\n// }\n\n// EnhancedTable.propTypes = {\n//   classes: PropTypes.object.isRequired,\n// };\n\n// export default withStyles(styles)(EnhancedTable);\n\nimport React, { Component }  from 'react';\nimport MUIDataTable from \"mui-datatables\";\nimport apiCall from '../../services/api';\nimport {connect} from 'react-redux';\nimport {fetchPatients} from '../../store/actions/patients';\n\nclass PatientsList extends Component{\n  componentDidMount(){\n    this.props.fetchPatients()\n  }\n  \n  \n  render(){\n    const columns = [\"Name\", \"Company\", \"City\", \"State\"];\n    const data = [\n     [\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"],\n     [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"],\n     [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"],\n     [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"],\n    ];\n    \n    const patientsList = 2\n     \n    const options = {\n      filterType: 'checkbox',\n    };  \n    \n    return(\n      <MUIDataTable\n        title={\"Pacientes\"}\n        data={data}\n        columns={columns}\n        options={options}\n      />\n    )\n  }  \n}\n\nexport default connect(null, { fetchPatients })(PatientsList);"]},"metadata":{},"sourceType":"module"}