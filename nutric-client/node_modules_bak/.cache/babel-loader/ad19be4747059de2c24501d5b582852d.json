{"ast":null,"code":"import _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/SearchDropdown.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from 'react-redux';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    container: {\n      flexGrow: 1,\n      position: 'relative'\n    },\n    paper: {\n      position: 'absolute',\n      zIndex: 40,\n      marginTop: theme.spacing.unit,\n      left: 0,\n      right: 0\n    },\n    chip: {\n      margin: \"\".concat(theme.spacing.unit / 2, \"px \").concat(theme.spacing.unit / 4, \"px\")\n    },\n    inputRoot: {\n      flexWrap: 'wrap'\n    },\n    inputInput: {\n      width: 'auto',\n      flexGrow: 1\n    },\n    divider: {\n      height: theme.spacing.unit * 2\n    }\n  };\n};\n\nfunction IntegrationDownshift(props) {\n  var classes = props.classes;\n  var patients = props.patients;\n  var patientList = patients.map(function (patient) {\n    return {\n      patient_id: patient._id,\n      label: patient.firstName + \" Apellido\"\n    };\n  });\n\n  function renderInput(inputProps) {\n    var InputProps = inputProps.InputProps,\n        classes = inputProps.classes,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"InputProps\", \"classes\", \"ref\"]);\n\n    return React.createElement(TextField, Object.assign({\n      InputProps: _objectSpread({\n        inputRef: ref,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput\n        }\n      }, InputProps)\n    }, other, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n  function renderSuggestion(_ref) {\n    var suggestion = _ref.suggestion,\n        index = _ref.index,\n        itemProps = _ref.itemProps,\n        highlightedIndex = _ref.highlightedIndex,\n        selectedItem = _ref.selectedItem;\n    var isHighlighted = highlightedIndex === index;\n    var isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n    return React.createElement(MenuItem, Object.assign({}, itemProps, {\n      key: suggestion.patient_id,\n      selected: isHighlighted,\n      component: \"div\",\n      style: {\n        fontWeight: isSelected ? 500 : 400\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), suggestion.label);\n  }\n\n  renderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.number,\n    index: PropTypes.number,\n    itemProps: PropTypes.object,\n    selectedItem: PropTypes.string,\n    suggestion: PropTypes.shape({\n      label: PropTypes.string\n    }).isRequired\n  };\n\n  function getSuggestions(value) {\n    var inputValue = deburr(value.trim()).toLowerCase();\n    var inputLength = inputValue.length;\n    var count = 0;\n    return inputLength === 0 ? [] : patientList.filter(function (suggestion) {\n      var keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n      if (keep) {\n        count += 1;\n      }\n\n      return keep;\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Downshift, {\n    id: \"downshift-simple\",\n    onChange: props.onPatientSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, function (_ref2) {\n    var getInputProps = _ref2.getInputProps,\n        getItemProps = _ref2.getItemProps,\n        getMenuProps = _ref2.getMenuProps,\n        highlightedIndex = _ref2.highlightedIndex,\n        inputValue = _ref2.inputValue,\n        isOpen = _ref2.isOpen,\n        selectedItem = _ref2.selectedItem;\n    return React.createElement(\"div\", {\n      className: classes.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"hidden\",\n      id: \"hidPatId\",\n      name: \"patient\",\n      value: \"3487\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), console.log(getItemProps), renderInput({\n      fullWidth: true,\n      classes: classes,\n      InputProps: getInputProps({\n        placeholder: 'buscar pacientes...'\n      })\n    }), React.createElement(\"div\", Object.assign({}, getMenuProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), isOpen ? React.createElement(Paper, {\n      className: classes.paper,\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, getSuggestions(inputValue).map(function (suggestion, index) {\n      return renderSuggestion({\n        suggestion: suggestion,\n        index: index,\n        itemProps: getItemProps({\n          item: suggestion.patient_id\n        }),\n        highlightedIndex: highlightedIndex,\n        selectedItem: selectedItem\n      });\n    })) : null));\n  }));\n}\n\nIntegrationDownshift.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n  return {\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n}\n\n;\nexport default connect(mapStateToProps, null)(withStyles(styles)(IntegrationDownshift));","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/SearchDropdown.js"],"names":["React","PropTypes","deburr","Downshift","withStyles","TextField","Paper","MenuItem","connect","styles","theme","root","flexGrow","container","position","paper","zIndex","marginTop","spacing","unit","left","right","chip","margin","inputRoot","flexWrap","inputInput","width","divider","height","IntegrationDownshift","props","classes","patients","patientList","map","patient","patient_id","_id","label","firstName","renderInput","inputProps","InputProps","ref","other","inputRef","input","renderSuggestion","suggestion","index","itemProps","highlightedIndex","selectedItem","isHighlighted","isSelected","indexOf","fontWeight","propTypes","number","object","string","shape","isRequired","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","onPatientSelected","getInputProps","getItemProps","getMenuProps","isOpen","console","log","fullWidth","placeholder","item","mapStateToProps","state","currentUserId","currentUser","user","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport {connect} from 'react-redux';\n\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  container: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 40,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0,\n  },\n  chip: {\n    margin: `${theme.spacing.unit / 2}px ${theme.spacing.unit / 4}px`,\n  },\n  inputRoot: {\n    flexWrap: 'wrap',\n  },\n  inputInput: {\n    width: 'auto',\n    flexGrow: 1,\n  },\n  divider: {\n    height: theme.spacing.unit * 2,\n  },\n});\n\n\nfunction IntegrationDownshift(props) {\n  const { classes } = props;\n  const {patients}=props;\n  const patientList = patients.map(function(patient){\n    return {patient_id: patient._id, label: patient.firstName+\" Apellido\"}\n  })\n\n\n  function renderInput(inputProps) {\n    const { InputProps, classes, ref, ...other } = inputProps;\n  \n    return (\n      <TextField\n        InputProps={{\n          inputRef: ref,\n          classes: {\n            root: classes.inputRoot,\n            input: classes.inputInput,\n          },\n          ...InputProps,\n        }}\n        {...other}\n      />\n    );\n  }\n\n  function renderSuggestion({ suggestion, index, itemProps, highlightedIndex, selectedItem }) {\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\n  \n    return (\n      <MenuItem\n        {...itemProps}\n        key={suggestion.patient_id}\n        selected={isHighlighted}\n        component=\"div\"\n        style={{\n          fontWeight: isSelected ? 500 : 400,\n        }}\n      >\n        {suggestion.label}\n      </MenuItem>\n    );\n  }\n  renderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.number,\n    index: PropTypes.number,\n    itemProps: PropTypes.object,\n    selectedItem: PropTypes.string,\n    suggestion: PropTypes.shape({ label: PropTypes.string }).isRequired,\n  };\n  \n  function getSuggestions(value) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n  \n    return inputLength === 0\n      ? []\n      : patientList.filter(suggestion => {\n          const keep =\n            count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n  \n          if (keep) {\n            count += 1;\n          }\n  \n          return keep;\n        });\n  }\n  \n  return (\n    <div className={classes.root}>\n      <Downshift id=\"downshift-simple\" onChange={props.onPatientSelected}>\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          highlightedIndex,\n          inputValue,\n          isOpen,\n          selectedItem,\n        }) => (\n          <div className={classes.container}>\n           <input type=\"hidden\" id=\"hidPatId\" name=\"patient\" value=\"3487\"/>\n           {console.log(getItemProps)}\n            {renderInput({\n              fullWidth: true,\n              classes,\n              InputProps: getInputProps({\n                placeholder: 'buscar pacientes...'\n              }),\n            })}\n            <div {...getMenuProps()}>\n              {isOpen ? (\n                <Paper className={classes.paper} square>\n                  {getSuggestions(inputValue).map((suggestion, index) =>\n                    renderSuggestion({\n                      suggestion,\n                      index,\n                      itemProps: getItemProps({ item: suggestion.patient_id}),\n                      highlightedIndex,\n                      selectedItem,\n                    }),\n                  )}\n                </Paper>\n              ) : null}\n            </div>\n          </div>\n        )}\n      </Downshift>\n    </div>\n  );\n}\n\nIntegrationDownshift.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state){\n  return{\n    patients: state.patients,\n    currentUserId: state.currentUser.user.id\n  };\n};\n  \nexport default connect(mapStateToProps, null)(withStyles(styles)(IntegrationDownshift));"]},"metadata":{},"sourceType":"module"}