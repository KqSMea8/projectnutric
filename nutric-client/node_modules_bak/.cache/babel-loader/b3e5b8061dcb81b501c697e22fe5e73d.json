{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/SearchDropdown.js\";\nimport React, { Component } from 'react';\nimport Downshift from 'downshift';\n\nvar DownshiftThree =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DownshiftThree, _Component);\n\n  function DownshiftThree(props) {\n    var _this;\n\n    _classCallCheck(this, DownshiftThree);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DownshiftThree).call(this, props));\n    _this.books = [{\n      name: 'Harry Potter'\n    }, {\n      name: 'Net Moves'\n    }, {\n      name: 'Half of a yellow sun'\n    }, {\n      name: 'The Da Vinci Code'\n    }, {\n      name: 'Born a crime'\n    }];\n    _this.state = {\n      // currently selected dropdown item\n      selectedBook: ''\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DownshiftThree, [{\n    key: \"onChange\",\n    value: function onChange(selectedBook) {\n      this.setState({\n        selectedBook: selectedBook.name\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Downshift, {\n        onChange: this.onChange,\n        selectedItem: this.state.selectedBook,\n        itemToString: function itemToString(books) {\n          return books ? books.name : '';\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"// pass the downshift props into a callback\", function (_ref) {\n        var isOpen = _ref.isOpen,\n            getToggleButtonProps = _ref.getToggleButtonProps,\n            getItemProps = _ref.getItemProps,\n            highlightedIndex = _ref.highlightedIndex,\n            dsSelectedItem = _ref.selectedItem,\n            getLabelProps = _ref.getLabelProps;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, \"// add a label tag and pass our label text to the getLabelProps function\", React.createElement(\"label\", Object.assign({\n          style: {\n            marginTop: '1rem',\n            display: 'block'\n          }\n        }, getLabelProps(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }), \"Select your favourite book\"), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }), \"// add a button for our dropdown and pass the selected book as its content if there's a selected item\", React.createElement(\"button\", Object.assign({\n          className: \"dropdown-button\"\n        }, getToggleButtonProps(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), _this2.state.selectedBook !== '' ? _this2.state.selectedBook : 'Select a book ...'), React.createElement(\"div\", {\n          style: {\n            position: 'relative'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, \"// if the input element is open, render the div else render nothing\", isOpen ? React.createElement(\"div\", {\n          className: \"downshift-dropdown\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, // map through all the books and render them\n        _this2.books.map(function (item, index) {\n          return React.createElement(\"div\", Object.assign({\n            className: \"dropdown-item\"\n          }, getItemProps({\n            key: index,\n            index: index,\n            item: item\n          }), {\n            style: {\n              backgroundColor: highlightedIndex === index ? 'lightgray' : 'white',\n              fontWeight: dsSelectedItem === item ? 'bold' : 'normal'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }), item.name);\n        })) : null));\n      });\n    }\n  }]);\n\n  return DownshiftThree;\n}(Component);\n\nexport { DownshiftThree as default };","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/components/Schedule/SearchDropdown.js"],"names":["React","Component","Downshift","DownshiftThree","props","books","name","state","selectedBook","onChange","bind","setState","isOpen","getToggleButtonProps","getItemProps","highlightedIndex","dsSelectedItem","selectedItem","getLabelProps","marginTop","display","position","map","item","index","key","backgroundColor","fontWeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Downshift from 'downshift';\n\nexport default class DownshiftThree extends Component {\n      constructor(props) {\n        super(props)\n        this.books = [\n          { name: 'Harry Potter' },\n          { name: 'Net Moves' },\n          { name: 'Half of a yellow sun' },\n          { name: 'The Da Vinci Code' },\n          { name: 'Born a crime' },\n        ];\n\n        this.state = {\n          // currently selected dropdown item\n          selectedBook: ''\n        }\n\n        this.onChange = this.onChange.bind(this)\n      }\n\n      onChange(selectedBook) {\n        this.setState({ selectedBook: selectedBook.name })\n      }\n\n      render() {\n        return (\n          <Downshift onChange={this.onChange} selectedItem={this.state.selectedBook} itemToString={books => (books ? books.name : '')}>\n          // pass the downshift props into a callback\n            {({ isOpen, getToggleButtonProps, getItemProps, highlightedIndex, selectedItem: dsSelectedItem, getLabelProps }) => (\n              <div>\n                // add a label tag and pass our label text to the getLabelProps function\n                <label style={{ marginTop: '1rem', display: 'block' }} {...getLabelProps()}>Select your favourite book</label> <br />\n                // add a button for our dropdown and pass the selected book as its content if there's a selected item\n                <button className=\"dropdown-button\" {...getToggleButtonProps()}>\n                  {this.state.selectedBook !== '' ? this.state.selectedBook : 'Select a book ...'}\n                </button>\n                <div style={{ position: 'relative' }}>\n                  // if the input element is open, render the div else render nothing\n                  {isOpen ? (\n                    <div className=\"downshift-dropdown\">\n                      {\n                        // map through all the books and render them\n                        this.books.map((item, index) => (\n                          <div\n                            className=\"dropdown-item\"\n                            {...getItemProps({ key: index, index, item })}\n                            style={{\n                              backgroundColor: highlightedIndex === index ? 'lightgray' : 'white',\n                              fontWeight: dsSelectedItem === item ? 'bold' : 'normal',\n                            }}>\n                            {item.name}\n                          </div>\n                        ))\n                      }\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            )}\n          </Downshift>\n        )\n      }\n    }"]},"metadata":{},"sourceType":"module"}