{"ast":null,"code":"import _toConsumableArray from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ubuntu/workspace/nutric-client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchAppointments } from '../../store/actions/appointments';\nimport BigCalendar from 'react-big-calendar';\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop';\nimport moment from 'moment';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css';\nimport events from './events';\nvar DragAndDropCalendar = withDragAndDrop(BigCalendar);\n\nrequire('moment/locale/es.js');\n\nvar localizer = BigCalendar.momentLocalizer(moment);\n\nvar ScheduleMain =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ScheduleMain, _Component);\n\n  function ScheduleMain(props) {\n    var _this;\n\n    _classCallCheck(this, ScheduleMain);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScheduleMain).call(this, props));\n\n    _this.resizeEvent = function (_ref) {\n      var event = _ref.event,\n          start = _ref.start,\n          end = _ref.end;\n      var events = _this.state.events;\n      var nextEvents = events.map(function (existingEvent) {\n        return existingEvent.id == event.id ? _objectSpread({}, existingEvent, {\n          start: start,\n          end: end\n        }) : existingEvent;\n      });\n\n      _this.setState({\n        events: nextEvents\n      });\n\n      alert(\"\".concat(event.title, \" was resized to \").concat(start, \"-\").concat(end));\n    };\n\n    _this.state = {\n      events: events\n    };\n    _this.moveEvent = _this.moveEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newEvent = _this.newEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ScheduleMain, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var currentUserId = this.props.currentUserId;\n      this.props.fetchAppointments(currentUserId, console.log('was fetched'));\n      console.log(this.props);\n    }\n  }, {\n    key: \"moveEvent\",\n    value: function moveEvent(_ref2) {\n      var event = _ref2.event,\n          start = _ref2.start,\n          end = _ref2.end,\n          droppedOnAllDaySlot = _ref2.isAllDay;\n      var events = this.state.events;\n      var idx = events.indexOf(event);\n      var allDay = event.allDay;\n\n      if (!event.allDay && droppedOnAllDaySlot) {\n        allDay = true;\n      } else if (event.allDay && !droppedOnAllDaySlot) {\n        allDay = false;\n      }\n\n      var updatedEvent = _objectSpread({}, event, {\n        start: start,\n        end: end,\n        allDay: allDay\n      });\n\n      var nextEvents = _toConsumableArray(events);\n\n      nextEvents.splice(idx, 1, updatedEvent);\n      this.setState({\n        events: nextEvents\n      });\n      alert(\"\".concat(event.title, \" was dropped onto \").concat(updatedEvent.start));\n    }\n  }, {\n    key: \"newEvent\",\n    value: function newEvent(event) {\n      var idList = this.state.events.map(function (a) {\n        return a.id;\n      });\n      var newId = Math.max.apply(Math, _toConsumableArray(idList)) + 1;\n      var hour = {\n        id: newId,\n        title: 'New Event',\n        allDay: event.slots.length == 1,\n        start: event.start,\n        end: event.end\n      };\n      this.setState({\n        events: this.state.events.concat([hour])\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var headerTitle = this.props.headerTitle;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, headerTitle), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Ac\\xE1 va la tabla de schedule\"), React.createElement(\"div\", {\n        style: {\n          height: \"700px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(DragAndDropCalendar, {\n        selectable: true,\n        localizer: localizer,\n        events: this.state.events,\n        onEventDrop: this.moveEvent,\n        resizable: true,\n        onEventResize: this.resizeEvent,\n        onSelectSlot: this.newEvent,\n        defaultView: BigCalendar.Views.WEEK,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ScheduleMain;\n}(Component);\n\n;\n\nfunction mapStateToProps(state) {\n  return {\n    appointments: state.appointments,\n    currentUserId: state.currentUser.user.id\n  };\n}\n\n;\nexport default connect(mapStateToProps, {\n  fetchAppointments: fetchAppointments\n})(ScheduleMain);","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/Main/containers/Schedule/ScheduleMain.js"],"names":["React","Component","connect","fetchAppointments","BigCalendar","withDragAndDrop","moment","events","DragAndDropCalendar","require","localizer","momentLocalizer","ScheduleMain","props","resizeEvent","event","start","end","state","nextEvents","map","existingEvent","id","setState","alert","title","moveEvent","bind","newEvent","currentUserId","console","log","droppedOnAllDaySlot","isAllDay","idx","indexOf","allDay","updatedEvent","splice","idList","a","newId","Math","max","hour","slots","length","concat","headerTitle","height","Views","WEEK","mapStateToProps","appointments","currentUser","user"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {fetchAppointments} from '../../store/actions/appointments';\nimport BigCalendar from 'react-big-calendar'\nimport withDragAndDrop from 'react-big-calendar/lib/addons/dragAndDrop'\nimport moment from 'moment'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport 'react-big-calendar/lib/addons/dragAndDrop/styles.css'\nimport events from './events'\n\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar)\nrequire('moment/locale/es.js');\n\nconst localizer = BigCalendar.momentLocalizer(moment)\n\nclass ScheduleMain extends Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: events\n    }\n    this.moveEvent = this.moveEvent.bind(this)\n    this.newEvent = this.newEvent.bind(this)\n  }\n  \n  componentDidMount(){\n    const { currentUserId } = this.props;\n    this.props.fetchAppointments(currentUserId, console.log('was fetched'));\n    console.log(this.props);\n  }\n  moveEvent({ event, start, end, isAllDay: droppedOnAllDaySlot }) {\n    const { events } = this.state\n\n    const idx = events.indexOf(event)\n    let allDay = event.allDay\n\n    if (!event.allDay && droppedOnAllDaySlot) {\n      allDay = true\n    } else if (event.allDay && !droppedOnAllDaySlot) {\n      allDay = false\n    }\n\n    const updatedEvent = { ...event, start, end, allDay }\n\n    const nextEvents = [...events]\n    nextEvents.splice(idx, 1, updatedEvent)\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    alert(`${event.title} was dropped onto ${updatedEvent.start}`)\n  }\n\n  resizeEvent = ({ event, start, end }) => {\n    const { events } = this.state\n\n    const nextEvents = events.map(existingEvent => {\n      return existingEvent.id == event.id\n        ? { ...existingEvent, start, end }\n        : existingEvent\n    })\n\n    this.setState({\n      events: nextEvents,\n    })\n\n    alert(`${event.title} was resized to ${start}-${end}`)\n  }\n\n  newEvent(event) {\n    let idList = this.state.events.map(a => a.id)\n    let newId = Math.max(...idList) + 1\n    let hour = {\n      id: newId,\n      title: 'New Event',\n      allDay: event.slots.length == 1,\n      start: event.start,\n      end: event.end,\n    }\n    this.setState({\n      events: this.state.events.concat([hour]),\n    })\n  }\n  render(){\n    const {headerTitle}=this.props\n    return(\n      <div >\n        <div>{headerTitle}</div>\n        <div>Acá va la tabla de schedule</div>\n        <div style={{height: \"700px\"}}>\n            <DragAndDropCalendar\n              selectable\n              localizer={localizer}\n              events={this.state.events}\n              onEventDrop={this.moveEvent}\n              resizable\n              onEventResize={this.resizeEvent}\n              onSelectSlot={this.newEvent}\n              defaultView={BigCalendar.Views.WEEK}\n            />\n        </div>\n      </div>\n    )\n  }\n};\n\nfunction mapStateToProps(state){\n  return{\n    appointments: state.appointments,\n    currentUserId: state.currentUser.user.id\n  };\n};\n\nexport default connect(mapStateToProps, { fetchAppointments })(ScheduleMain);\n"]},"metadata":{},"sourceType":"module"}