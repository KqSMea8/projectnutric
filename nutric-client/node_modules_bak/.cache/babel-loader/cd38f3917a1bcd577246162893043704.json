{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/workspace/nutric-client/src/containers/App.js\";\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '../store';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../App.css';\nimport Main from \"./Main\";\nimport { setAuthorizationToken, setCurrentUser } from \"../store/actions/auth\";\nimport jwtDecode from \"jwt-decode\";\nvar store = configureStore();\n\nif (localStorage.jwtToken) {\n  setAuthorizationToken(localStorage.jwtToken); // prevent someone from manually tampering with the key of jwtToken in localStorage\n\n  try {\n    store.dispatch(setCurrentUser(jwtDecode(localStorage.jwtToken)));\n  } catch (e) {\n    store.dispatch(setCurrentUser({}));\n  }\n} // functional porque redux maneja el state\n\n\nvar App = function App() {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/ubuntu/workspace/nutric-client/src/containers/App.js"],"names":["React","Provider","configureStore","BrowserRouter","Router","Switch","Route","Main","setAuthorizationToken","setCurrentUser","jwtDecode","store","localStorage","jwtToken","dispatch","e","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAO,YAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,QAAsD,uBAAtD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,IAAMC,KAAK,GAAGT,cAAc,EAA5B;;AAEA,IAAIU,YAAY,CAACC,QAAjB,EAA2B;AACzBL,EAAAA,qBAAqB,CAACI,YAAY,CAACC,QAAd,CAArB,CADyB,CAEzB;;AACA,MAAI;AACFF,IAAAA,KAAK,CAACG,QAAN,CAAeL,cAAc,CAACC,SAAS,CAACE,YAAY,CAACC,QAAd,CAAV,CAA7B;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACVJ,IAAAA,KAAK,CAACG,QAAN,CAAeL,cAAc,CAAC,EAAD,CAA7B;AACD;AACF,C,CAGD;;;AACA,IAAMO,GAAG,GAAG,SAANA,GAAM;AAAA,SACV,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEL,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADU;AAAA,CAAZ;;AAQA,eAAeK,GAAf","sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '../store';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport '../App.css';\nimport Main from \"./Main\";\nimport { setAuthorizationToken, setCurrentUser } from \"../store/actions/auth\";\nimport jwtDecode from \"jwt-decode\";\n\n\nconst store = configureStore(); \n\nif (localStorage.jwtToken) {\n  setAuthorizationToken(localStorage.jwtToken);\n  // prevent someone from manually tampering with the key of jwtToken in localStorage\n  try {\n    store.dispatch(setCurrentUser(jwtDecode(localStorage.jwtToken)));\n  } catch (e) {\n    store.dispatch(setCurrentUser({}));\n  }\n}\n\n\n// functional porque redux maneja el state\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <Main /> \n    </Router>\n  </Provider>\n)\n  \nexport default App;\n"]},"metadata":{},"sourceType":"module"}