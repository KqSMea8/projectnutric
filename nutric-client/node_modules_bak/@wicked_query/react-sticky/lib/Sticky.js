"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var Sticky =
/*#__PURE__*/
function (_Component) {
  _inherits(Sticky, _Component);

  function Sticky() {
    var _this;

    _classCallCheck(this, Sticky);

    _this = _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call(this));
    _this.scroller = _this.scroller.bind(_assertThisInitialized(_this));
    _this.reposition = _this.reposition.bind(_assertThisInitialized(_this));
    _this.subscribe = _this.subscribe.bind(_assertThisInitialized(_this));
    _this.getScrollTop = _this.getScrollTop.bind(_assertThisInitialized(_this));
    _this.setFixedProps = _this.setFixedProps.bind(_assertThisInitialized(_this));
    _this.scrollTop = null;
    _this.rect = null;
    _this.sticky = null;
    _this.placeHolder = null;
    _this.timer = null;
    _this.domState = {
      style: {},
      hasStyle: false,
      scrollTop: 0,
      oldStyle: {}
    };
    return _this;
  }

  _createClass(Sticky, [{
    key: "getScrollTop",
    value: function getScrollTop() {
      this.rect = this.sticky.getBoundingClientRect();
      this.scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this2 = this;

      if (window && this.sticky) {
        this.props.events.map(function (event) {
          return window.removeEventListener(event, _this2.scroller);
        });
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      if (window && this.sticky) {
        this.props.events.map(function (event) {
          return window.addEventListener(event, _this3.scroller);
        });
      }

      document.onreadystatechange = function () {
        if (document.readyState === "complete") {
          _this3.reposition();
        }
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.offset !== nextProps.offset) {
        this.reposition();
      }
    }
  }, {
    key: "setFixedProps",
    value: function setFixedProps() {
      var oldHeight = this.rect.height;

      if (this.props.addClassName) {
        this.sticky.classList.add(this.props.addClassName);
        this.getScrollTop();
      }

      this.domState.scrollTop = this.scrollTop + this.rect.top;
      this.domState.scrollWidth = this.rect.right - this.rect.left;
      this.sticky.style.position = 'fixed';
      this.sticky.style.top = Math.round(this.props.offset) + 'px';
      this.sticky.style.width = Math.round(this.domState.scrollWidth) + 'px';
      this.sticky.style.zIndex = this.props.zIndex;
      this.placeHolder.style.height = Math.round(oldHeight) + 'px';
      this.domState.hasStyle = true;
      this.sticky.classList.add(this.props.className);
      this.subscribe(this.rect);
    }
  }, {
    key: "reposition",
    value: function reposition() {
      var _this4 = this;

      if (this.domState.hasStyle === true) {
        this.sticky.style = this.domState.oldStyle;
        clearTimeout(this.timer);
        this.timer = setTimeout(function () {
          _this4.getScrollTop();

          _this4.setFixedProps();
        }, this.props.timeout);
      }
    }
  }, {
    key: "subscribe",
    value: function subscribe(rect) {
      if (typeof this.props.subscribe === 'function') {
        this.props.subscribe(rect);
      }
    }
  }, {
    key: "scroller",
    value: function scroller(event) {
      this.getScrollTop();

      if (event.type === 'resize' || event.type === 'pageshow') {
        // Reposition the component;
        this.reposition();
      }

      if (this.domState.hasStyle === false) {
        this.domState.scrollTop = this.scrollTop + this.rect.top;
        this.domState.scrollWidth = this.rect.right - this.rect.left;
      }

      if (Math.round(this.rect.top) <= Math.round(this.props.offset) && Math.round(this.domState.scrollTop) <= Math.round(this.scrollTop + this.props.offset)) {
        if (this.domState.hasStyle === false) {
          this.domState.oldStyle = this.sticky.style;
          this.setFixedProps();
        }
      } else if (this.domState.hasStyle === true) {
        this.sticky.style = this.domState.oldStyle;
        this.placeHolder.style.height = 0;
        this.domState.hasStyle = false;

        if (this.props.addClassName) {
          this.sticky.classList.remove(this.props.addClassName);
        }

        this.sticky.classList.remove(this.props.className);
        this.subscribe(this.rect);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", {
        ref: function ref(_ref) {
          return _this5.sticky = _ref;
        }
      }, this.props.children), _react.default.createElement("div", {
        ref: function ref(_ref2) {
          return _this5.placeHolder = _ref2;
        },
        style: {
          height: '0px'
        }
      }));
    }
  }]);

  return Sticky;
}(_react.Component);

Sticky.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
  offset: _propTypes.default.number,
  zIndex: _propTypes.default.number,
  className: _propTypes.default.string,
  addClassName: _propTypes.default.string,
  events: _propTypes.default.array,
  timeout: _propTypes.default.number,
  subscribe: _propTypes.default.func
};
Sticky.defaultProps = {
  offset: 0,
  zIndex: 1040,
  className: 'sticked',
  addClassName: '',
  events: ['scroll', 'resize', 'touchstart', 'touchmove', 'touchend', 'pageshow', 'load'],
  timeout: 0
};
var _default = Sticky;
exports.default = _default;